{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introduction [Boost::ext].SML (State Machine Language/Lite/Library) Your scalable C++14 one header only State Machine Library with no dependencies ( Try it online! ) GitHub Download Changelog Tutorial Examples UML State Machine State Machine UML2 Specification Boost.MSM - eUML Do I need a State Machine? State Machine design pattern prevents you from creating and maintaining spaghetti code. void some_function() { ... if ((is_running !is_jumping) || just_started) { ... } else if (is_boss_level extra_feature_enabled !ab_test) { ... } else { ... } } If above code looks somewhat similar to your code base or if you like to avoid it [Boost].SML may suit you! Real Life examples? Why [Boost].SML? Boost.MSM - eUML is awesome, however it has a few huge limitations making it unusable on a large scale projects; [Boost].SML, therefore, is trying to address those issues. Problems with Boost.MSM - eUML Long compilation times (see Performance ) Huge resulting binaries (see Performance ) Based on too many macros Long error messages (see Error Messages ) Sometimes hard to follow as not all actions might be seen on transition table (ex. initial states, state entry/exit actions) A lot of boilerplate code with actions/guards (requires fsm, event, source state, target state) Data in states makes it harder to share/encapsulate (UML compliant though) Loosely coupled design is hard to achieve Functional programming emulation Huge complexity may overwhelm in the beginning A lot of Boost dependencies [Boost].SML design goals Keep the Boost.MSM - eUML 'goodies' Performance (see Performance ) Memory usage (see Performance ) eUML DSL (src_state + event [ guard ] / action - dst_state) UML standard compliant (As much as possible) Eliminate Boost.MSM - eUML problems Compilation times (see Performance ) Binary size (see Performance ) Reduce complexity by eliminating less used features Short and informative error messages (see Error Messages ) Less boilerplate / no macros (see Hello World ) Improve visibility by having all actions on transition table (see States ) Allows loosely coupled design (see Dependency Injection ) Functional programming support using lamda expressions (see Action/Guards ) No dependencies / one header (2k LOC) What 'lite' implies? Guaranteed quick compilation times Maximized performance No dependencies Easy/Intuitive to use Supported UML features Transitions / Anonymous transitions / Internal transitions / Self transitions / No transition (see Transitions , Events ) Actions / Guards (see Action/Guards ) State entry / exit actions (see States ) Orthogonal regions (see Orthogonal Regions ) Sub / Composite state machines (see Composite ) History (see History ) Defer/Process (see Defer/Process ) Additional features Logging (see Logging ) Testing (see Testing ) Runtime Dispatcher (see Runtime Dispatcher ) Dependency Injection integration (see Dependency Injection ) Related materials C++Now 2019 - Kris Jusiak - Rise of the State Machines C++Now 2019 - Michael Caisse - Embedded Domain Specific Languages for Embedded Bare Metal Projects CppCast - Boost DI and SML CppCon 2018 - Ben Deane - Operator Overloading: History, Principles and Practice CppCon 2018 - Kris Jusiak - State Machines Battlefield - Naive vs STL vs Boost C++Now 2018 - Michael Caisse - \u201cModern C++ in Embedded Systems\u201d EmBO++ 2018 - Kris Jusiak - Workshop - 'Embedding' a Meta State Machine EmBO++ 2018 - Simon Brand - Embedded DSLs for embedded programming EmBO++ 2017 - Kris Jusiak - 'Embedding' a Meta State Machine C++Now 2017 - Kris Jusiak - State Machine Language C++Now 2016 - Kris Jusiak - C++14 version of Boost.MSM-eUML Meeting C++ 2016 - Kris Jusiak - Implementing a web game in C++14 Acknowledgements Thanks to Christophe Henry for a great Boost.MSM - eUML library Thanks to Deniz Bahadir for all his constributions and support Thanks to Takatoshi Kondo for testing, improving the library and for a great Boost.MSM guide ! Thanks to Ulenspiegel for insuring the quality of the library Thanks to Jean Davy for the cmake support Thanks to feltech for improvements and bug fixes Thanks to Vicente J. Botet Escriba for useful suggestions how to improve the library Thanks to AnthonyVH for all contributions Thanks to Oliver Daniell for all contributions Thanks to Julius Gel\u0161vartas for bug fixes Thanks to Christopher Motl for documentation fixes","title":"Introduction"},{"location":"index.html#introduction","text":"[Boost::ext].SML (State Machine Language/Lite/Library) Your scalable C++14 one header only State Machine Library with no dependencies ( Try it online! ) GitHub Download Changelog Tutorial Examples","title":"Introduction"},{"location":"index.html#uml-state-machine","text":"State Machine UML2 Specification Boost.MSM - eUML","title":"UML State Machine"},{"location":"index.html#do-i-need-a-state-machine","text":"State Machine design pattern prevents you from creating and maintaining spaghetti code. void some_function() { ... if ((is_running !is_jumping) || just_started) { ... } else if (is_boss_level extra_feature_enabled !ab_test) { ... } else { ... } } If above code looks somewhat similar to your code base or if you like to avoid it [Boost].SML may suit you!","title":"Do I need a State Machine?"},{"location":"index.html#real-life-examples","text":"","title":"Real Life examples?"},{"location":"index.html#why-boostsml","text":"Boost.MSM - eUML is awesome, however it has a few huge limitations making it unusable on a large scale projects; [Boost].SML, therefore, is trying to address those issues.","title":"Why [Boost].SML?"},{"location":"index.html#problems-with-boostmsm-euml","text":"Long compilation times (see Performance ) Huge resulting binaries (see Performance ) Based on too many macros Long error messages (see Error Messages ) Sometimes hard to follow as not all actions might be seen on transition table (ex. initial states, state entry/exit actions) A lot of boilerplate code with actions/guards (requires fsm, event, source state, target state) Data in states makes it harder to share/encapsulate (UML compliant though) Loosely coupled design is hard to achieve Functional programming emulation Huge complexity may overwhelm in the beginning A lot of Boost dependencies","title":"Problems with Boost.MSM - eUML"},{"location":"index.html#boostsml-design-goals","text":"Keep the Boost.MSM - eUML 'goodies' Performance (see Performance ) Memory usage (see Performance ) eUML DSL (src_state + event [ guard ] / action - dst_state) UML standard compliant (As much as possible) Eliminate Boost.MSM - eUML problems Compilation times (see Performance ) Binary size (see Performance ) Reduce complexity by eliminating less used features Short and informative error messages (see Error Messages ) Less boilerplate / no macros (see Hello World ) Improve visibility by having all actions on transition table (see States ) Allows loosely coupled design (see Dependency Injection ) Functional programming support using lamda expressions (see Action/Guards ) No dependencies / one header (2k LOC)","title":"[Boost].SML design goals"},{"location":"index.html#what-lite-implies","text":"Guaranteed quick compilation times Maximized performance No dependencies Easy/Intuitive to use","title":"What 'lite' implies?"},{"location":"index.html#supported-uml-features","text":"Transitions / Anonymous transitions / Internal transitions / Self transitions / No transition (see Transitions , Events ) Actions / Guards (see Action/Guards ) State entry / exit actions (see States ) Orthogonal regions (see Orthogonal Regions ) Sub / Composite state machines (see Composite ) History (see History ) Defer/Process (see Defer/Process )","title":"Supported UML features"},{"location":"index.html#additional-features","text":"Logging (see Logging ) Testing (see Testing ) Runtime Dispatcher (see Runtime Dispatcher ) Dependency Injection integration (see Dependency Injection )","title":"Additional features"},{"location":"index.html#related-materials","text":"C++Now 2019 - Kris Jusiak - Rise of the State Machines C++Now 2019 - Michael Caisse - Embedded Domain Specific Languages for Embedded Bare Metal Projects CppCast - Boost DI and SML CppCon 2018 - Ben Deane - Operator Overloading: History, Principles and Practice CppCon 2018 - Kris Jusiak - State Machines Battlefield - Naive vs STL vs Boost C++Now 2018 - Michael Caisse - \u201cModern C++ in Embedded Systems\u201d EmBO++ 2018 - Kris Jusiak - Workshop - 'Embedding' a Meta State Machine EmBO++ 2018 - Simon Brand - Embedded DSLs for embedded programming EmBO++ 2017 - Kris Jusiak - 'Embedding' a Meta State Machine C++Now 2017 - Kris Jusiak - State Machine Language C++Now 2016 - Kris Jusiak - C++14 version of Boost.MSM-eUML Meeting C++ 2016 - Kris Jusiak - Implementing a web game in C++14","title":"Related materials"},{"location":"index.html#acknowledgements","text":"Thanks to Christophe Henry for a great Boost.MSM - eUML library Thanks to Deniz Bahadir for all his constributions and support Thanks to Takatoshi Kondo for testing, improving the library and for a great Boost.MSM guide ! Thanks to Ulenspiegel for insuring the quality of the library Thanks to Jean Davy for the cmake support Thanks to feltech for improvements and bug fixes Thanks to Vicente J. Botet Escriba for useful suggestions how to improve the library Thanks to AnthonyVH for all contributions Thanks to Oliver Daniell for all contributions Thanks to Julius Gel\u0161vartas for bug fixes Thanks to Christopher Motl for documentation fixes","title":"Acknowledgements"},{"location":"CHANGELOG.html","text":"1.1.6 - 2022-09-07 Bug Fixes Issues Contributions Ladislas de Toldi 1.1.5 - 2022-03-23 Bug Fixes Issues 1.1.4 - 2021-02-16 Additions LICENSE file Bug Fixes Issues 1.1.3 - 2020-08-02 Additions Support for member-function like guards/actions https://github.com/boost-ext/sml/commit/e6d0685993a8a0160dde1610d7f8be4f811c89d0 Bug Fixes Issues Contributions Guilhem Codron 1.1.2 - 2020-06-14 Additions Support for GCC-10 Bug Fixes Issues Contributions erikzenkerLogmein 1.1.1 - 2020-05-17 Additions Support for Clang-8.0/9.0/10.0 Support for GCC-8/9/10 Support for MSVC-2019/MSVC-2019 Preview Bug Fixes Issues Contributions Dale Lukas Peterson ooxi erikzenkerLogmein Takatoshi Kondo Dror Speiser Benjamin Worpitz Richard Szabo Patrick Larson Joseph Loser Maximilian Riemensberger Andrey 1.1.0 - 2019-01-08 Additions Support for Clang-5.0/6.0/7.0 Support for GCC-7/8 Support for MSVC-2015/MSVC-2017/MSVC-2017 Preview Build System CMake support Conan support Benchmarks Connection Bug Fixes Issues Contributions Deniz Bahadir feltech AnthonyVH Takatoshi Kondo GuiCodron Oleg Artenii Camille Bordignon William.Wu Samuel Debionne Adam Mizerski Paul M. Bendixen Christopher Motl Julius Gel\u0161vartas 1.0.1 - 2016-05-06 Additions Support for GCC-6.1 1.0.0 - 2016-01-28 Initial version","title":"CHANGELOG"},{"location":"CHANGELOG.html#116-2022-09-07","text":"Bug Fixes Issues Contributions Ladislas de Toldi","title":"1.1.6 - 2022-09-07"},{"location":"CHANGELOG.html#115-2022-03-23","text":"Bug Fixes Issues","title":"1.1.5 - 2022-03-23"},{"location":"CHANGELOG.html#114-2021-02-16","text":"Additions LICENSE file Bug Fixes Issues","title":"1.1.4 - 2021-02-16"},{"location":"CHANGELOG.html#113-2020-08-02","text":"Additions Support for member-function like guards/actions https://github.com/boost-ext/sml/commit/e6d0685993a8a0160dde1610d7f8be4f811c89d0 Bug Fixes Issues Contributions Guilhem Codron","title":"1.1.3 - 2020-08-02"},{"location":"CHANGELOG.html#112-2020-06-14","text":"Additions Support for GCC-10 Bug Fixes Issues Contributions erikzenkerLogmein","title":"1.1.2 - 2020-06-14"},{"location":"CHANGELOG.html#111-2020-05-17","text":"Additions Support for Clang-8.0/9.0/10.0 Support for GCC-8/9/10 Support for MSVC-2019/MSVC-2019 Preview Bug Fixes Issues Contributions Dale Lukas Peterson ooxi erikzenkerLogmein Takatoshi Kondo Dror Speiser Benjamin Worpitz Richard Szabo Patrick Larson Joseph Loser Maximilian Riemensberger Andrey","title":"1.1.1 - 2020-05-17"},{"location":"CHANGELOG.html#110-2019-01-08","text":"Additions Support for Clang-5.0/6.0/7.0 Support for GCC-7/8 Support for MSVC-2015/MSVC-2017/MSVC-2017 Preview Build System CMake support Conan support Benchmarks Connection Bug Fixes Issues Contributions Deniz Bahadir feltech AnthonyVH Takatoshi Kondo GuiCodron Oleg Artenii Camille Bordignon William.Wu Samuel Debionne Adam Mizerski Paul M. Bendixen Christopher Motl Julius Gel\u0161vartas","title":"1.1.0 - 2019-01-08"},{"location":"CHANGELOG.html#101-2016-05-06","text":"Additions Support for GCC-6.1","title":"1.0.1 - 2016-05-06"},{"location":"CHANGELOG.html#100-2016-01-28","text":"Initial version","title":"1.0.0 - 2016-01-28"},{"location":"benchmarks.html","text":"[Boost].SML vs Boost.MSM-eUML vs Boost.Statechart Features Overview Library [Boost].SML Boost.MSM-eUML Boost.Statechart Standard C++14 C++98/03 C++98/03 Version 1.0.1 1.61 1.61 License Boost 1.0 Boost 1.0 Boost 1.0 Linkage header only header only header only Details Library [Boost].SML Boost.MSM-eUML Boost.Statechart UML 2.0 2.0 1.5 RTTI - - \u2713 Exceptions - - \u2713 Memory Allocations - - \u2713 UML features Library [Boost].SML Boost.MSM-eUML Boost.Statechart Transition \u2713 \u2713 \u2713 Anonymous transition \u2713 \u2713 \u2713 Internal transition \u2713 \u2713 \u2713 Local transitions - - - State entry/exit \u2713 \u2713 \u2713 Guard \u2713 \u2713 \u2713 Action \u2713 \u2713 \u2713 Event defering ~ \u2713 \u2713 Error handling \u2713 \u2713 \u2713 Initial state \u2713 \u2713 \u2713 Terminate State \u2713 \u2713 \u2713 Explicit entry \u2713 \u2713 \u2713 Explicit exit - \u2713 \u2713 Fork - \u2713 - Orthogonal regions \u2713 \u2713 \u2713 Sub / Composite \u2713 \u2713 \u2713 Shallow History \u2713 \u2713 \u2713 Deep History ~ ~ \u2713 Non-UML features Library [Boost].SML Boost.MSM-eUML Boost.Statechart Any event - \u2713 - Flags - \u2713 - Interrupt state - \u2713 - State Visitor \u2713 \u2713 \u2713 Serialization - \u2713 - Dispatcher \u2713 - - Asynchronous SM - - \u2713 Benchmarks Test CXXFLAGS Events States Transitions Process Events Simple Test -O2 -s, /Ox 6 5 12 1'000'000 Clang-3.7 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.144s 3.855s 8.699s 1.028s Execution time 15ms 17ms 17ms 1232ms Memory usage 1b 32b 28b 200b Executable size 11K 91K 15K + boost_system 59K GCC-5.2 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.175s 7.879s 17.101s 1.790s Execution time 15ms 19ms 21ms 929ms Memory usage 1b 32b 28b 224b Executable size 11K 67K 15K + boost_system 63K MSVC-2015 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.450s Execution time 27ms Memory usage 16b Executable size 206K Test CXXFLAGS Events States Transitions Process Events Composite Test -O2 -s, /Ox 8 5 + 3 12 + 4 1'000 * 1'000 Clang-3.7 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.184s 4.526s 10.599s 1.293s Execution time 10ms 14ms 10ms 491ms Memory usage 2b 60b 52b 200b Executable size 15K 111K 15K + boost_system 83K GCC-5.2 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.248s 9.363s 23.404s 2.037s Execution time 9ms 13ms 12ms 404ms Memory usage 2b 60b 52b 224b Executable size 12K 91K 15K + boost_system 83K MSVC-2015 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.599s Execution time 21ms Memory usage 23b Executable size 224K Test CXXFLAGS Events States Transitions Process Events Complex Test -O2 -s, /Ox 50 50 50 1'000'000 Clang-3.7 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.582s 1m15.935s 43.341s 3.661s Execution time 69ms 81ms 78ms 6221ms Memory usage 1b 120b 72b 200b Executable size 35K 611K 31K + boost_system 343K GCC-5.2 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.816s 52.238s 1m41.045s 4.997s Execution time 72ms 77ms 91ms 5520ms Memory usage 1b 120b 72b 224b Executable size 35K 271K 47K + boost_system 215K MSVC-2015 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 1.891s Execution time 166ms Memory usage 104b Executable size 224K | Test | | ---- | | Header Test | Clang-3.7 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.060s 2.072s 2.504s 0.552s GCC-5.2 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.073s 3.197s 3.986s 0.704s MSVC-2015 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.182s To run benchmarks cd benchmark make # make benchmark_simple benchmark_composite benchmark_complex","title":"Features/Benchmarks"},{"location":"benchmarks.html#features","text":"Overview Library [Boost].SML Boost.MSM-eUML Boost.Statechart Standard C++14 C++98/03 C++98/03 Version 1.0.1 1.61 1.61 License Boost 1.0 Boost 1.0 Boost 1.0 Linkage header only header only header only Details Library [Boost].SML Boost.MSM-eUML Boost.Statechart UML 2.0 2.0 1.5 RTTI - - \u2713 Exceptions - - \u2713 Memory Allocations - - \u2713 UML features Library [Boost].SML Boost.MSM-eUML Boost.Statechart Transition \u2713 \u2713 \u2713 Anonymous transition \u2713 \u2713 \u2713 Internal transition \u2713 \u2713 \u2713 Local transitions - - - State entry/exit \u2713 \u2713 \u2713 Guard \u2713 \u2713 \u2713 Action \u2713 \u2713 \u2713 Event defering ~ \u2713 \u2713 Error handling \u2713 \u2713 \u2713 Initial state \u2713 \u2713 \u2713 Terminate State \u2713 \u2713 \u2713 Explicit entry \u2713 \u2713 \u2713 Explicit exit - \u2713 \u2713 Fork - \u2713 - Orthogonal regions \u2713 \u2713 \u2713 Sub / Composite \u2713 \u2713 \u2713 Shallow History \u2713 \u2713 \u2713 Deep History ~ ~ \u2713 Non-UML features Library [Boost].SML Boost.MSM-eUML Boost.Statechart Any event - \u2713 - Flags - \u2713 - Interrupt state - \u2713 - State Visitor \u2713 \u2713 \u2713 Serialization - \u2713 - Dispatcher \u2713 - - Asynchronous SM - - \u2713","title":"Features"},{"location":"benchmarks.html#benchmarks","text":"Test CXXFLAGS Events States Transitions Process Events Simple Test -O2 -s, /Ox 6 5 12 1'000'000 Clang-3.7 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.144s 3.855s 8.699s 1.028s Execution time 15ms 17ms 17ms 1232ms Memory usage 1b 32b 28b 200b Executable size 11K 91K 15K + boost_system 59K GCC-5.2 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.175s 7.879s 17.101s 1.790s Execution time 15ms 19ms 21ms 929ms Memory usage 1b 32b 28b 224b Executable size 11K 67K 15K + boost_system 63K MSVC-2015 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.450s Execution time 27ms Memory usage 16b Executable size 206K Test CXXFLAGS Events States Transitions Process Events Composite Test -O2 -s, /Ox 8 5 + 3 12 + 4 1'000 * 1'000 Clang-3.7 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.184s 4.526s 10.599s 1.293s Execution time 10ms 14ms 10ms 491ms Memory usage 2b 60b 52b 200b Executable size 15K 111K 15K + boost_system 83K GCC-5.2 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.248s 9.363s 23.404s 2.037s Execution time 9ms 13ms 12ms 404ms Memory usage 2b 60b 52b 224b Executable size 12K 91K 15K + boost_system 83K MSVC-2015 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.599s Execution time 21ms Memory usage 23b Executable size 224K Test CXXFLAGS Events States Transitions Process Events Complex Test -O2 -s, /Ox 50 50 50 1'000'000 Clang-3.7 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.582s 1m15.935s 43.341s 3.661s Execution time 69ms 81ms 78ms 6221ms Memory usage 1b 120b 72b 200b Executable size 35K 611K 31K + boost_system 343K GCC-5.2 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.816s 52.238s 1m41.045s 4.997s Execution time 72ms 77ms 91ms 5520ms Memory usage 1b 120b 72b 224b Executable size 35K 271K 47K + boost_system 215K MSVC-2015 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 1.891s Execution time 166ms Memory usage 104b Executable size 224K | Test | | ---- | | Header Test | Clang-3.7 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.060s 2.072s 2.504s 0.552s GCC-5.2 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.073s 3.197s 3.986s 0.704s MSVC-2015 [Boost].SML [Boost.MSM-eUML] [Boost.MSM3-eUML2] [Boost.Statechart] Compilation time 0.182s To run benchmarks cd benchmark make # make benchmark_simple benchmark_composite benchmark_complex","title":"Benchmarks"},{"location":"examples.html","text":"Hello World Events States Actions Guards Transitions Defer/Process Orthogonal Regions Composite History Error handling Logging Nested Testing Runtime Dispatcher eUML Emulation Dependencies Data In-Place Dependency Injection Arduino Integration SDL2 Integration Plant UML Integration Hello World Events States Actions Guards Transitions Defer/Process Orthogonal Regions Composite History Error handling Logging Nested Testing Runtime Dispatcher eUML Emulation Dependencies Data In-Place Dependency Injection Arduino Integration SDL2 Integration Plant UML Integration","title":"Examples"},{"location":"examples.html#hello-world","text":"","title":"Hello World"},{"location":"examples.html#events","text":"","title":"Events"},{"location":"examples.html#states","text":"","title":"States"},{"location":"examples.html#actions-guards","text":"","title":"Actions Guards"},{"location":"examples.html#transitions","text":"","title":"Transitions"},{"location":"examples.html#deferprocess","text":"","title":"Defer/Process"},{"location":"examples.html#orthogonal-regions","text":"","title":"Orthogonal Regions"},{"location":"examples.html#composite","text":"","title":"Composite"},{"location":"examples.html#history","text":"","title":"History"},{"location":"examples.html#error-handling","text":"","title":"Error handling"},{"location":"examples.html#logging","text":"","title":"Logging"},{"location":"examples.html#nested","text":"","title":"Nested"},{"location":"examples.html#testing","text":"","title":"Testing"},{"location":"examples.html#runtime-dispatcher","text":"","title":"Runtime Dispatcher"},{"location":"examples.html#euml-emulation","text":"","title":"eUML Emulation"},{"location":"examples.html#dependencies","text":"","title":"Dependencies"},{"location":"examples.html#data","text":"","title":"Data"},{"location":"examples.html#in-place","text":"","title":"In-Place"},{"location":"examples.html#dependency-injection","text":"","title":"Dependency Injection"},{"location":"examples.html#arduino-integration","text":"","title":"Arduino Integration"},{"location":"examples.html#sdl2-integration","text":"","title":"SDL2 Integration"},{"location":"examples.html#plant-uml-integration","text":"","title":"Plant UML Integration"},{"location":"faq.html","text":"","title":"FAQ"},{"location":"overview.html","text":"Quick Start Get boost/sml.hpp header wget https://raw.githubusercontent.com/boost-ext/sml/master/include/boost/sml.hpp Include the header and define sml namespace alias #include boost/sml.hpp namespace sml = boost::sml; Compile with C++14 support $CXX -std=c++14 ... | cl /std:c++14 ... To run tests git clone https://github.com/boost-ext/sml cd sml make test Dependencies No external dependencies are required (neither STL nor Boost) Supported/Tested compilers Clang-3.4+ GCC-5.2+ MSVC-2015 Known limitations src_state _s + event e = dst_state _s // Error on MSVC-2015, Ok on GCC-5+, Clang-3.4+ state class src_state + event e = state class dst_state // Ok on all supported compilers const auto guard1 = [] { return true; } state class a + event e [ guard1 ] / [](const auto event) {} // Error on MSVC-2015, Ok on GCC-5+, Clang-3.4+ const auto guard2 = [] - bool { return true; } state class a + event e [ guard2 ] / [](const auto event) - void {} // Ok on all supported compilers Configuration Macro Description BOOST_SML_VERSION Current version of [Boost].SML (ex. 1'0'0) Exception Safety [Boost].SML doesn't use exceptions internally and therefore might be compiled with -fno-exceptions . If guard throws an exception State Machine will stay in a current state. If action throws an exception State Machine will be in the new state Exceptions might be caught using transition table via exception event. See Error handling . Thread Safety [Boost].SML is not thread safe by default. Thread Safety might be enabled by defining a thread_safe policy when creating a State Machine. Lock type has to be provided. sml::sm example, sml::thread_safe std::recursive_mutex sm; sm.process_event(event{}); // thread safe call See Thread Safe Policy Design Component Description [Front-End] Transition Table Domain Specific Language [Back-End] State Machine implementation details Error messages Not configurable Not callable Not transitional Not dispatchable","title":"Overview"},{"location":"overview.html#quick-start","text":"Get boost/sml.hpp header wget https://raw.githubusercontent.com/boost-ext/sml/master/include/boost/sml.hpp Include the header and define sml namespace alias #include boost/sml.hpp namespace sml = boost::sml; Compile with C++14 support $CXX -std=c++14 ... | cl /std:c++14 ... To run tests git clone https://github.com/boost-ext/sml cd sml make test","title":"Quick Start"},{"location":"overview.html#dependencies","text":"No external dependencies are required (neither STL nor Boost)","title":"Dependencies"},{"location":"overview.html#supportedtested-compilers","text":"Clang-3.4+ GCC-5.2+ MSVC-2015 Known limitations src_state _s + event e = dst_state _s // Error on MSVC-2015, Ok on GCC-5+, Clang-3.4+ state class src_state + event e = state class dst_state // Ok on all supported compilers const auto guard1 = [] { return true; } state class a + event e [ guard1 ] / [](const auto event) {} // Error on MSVC-2015, Ok on GCC-5+, Clang-3.4+ const auto guard2 = [] - bool { return true; } state class a + event e [ guard2 ] / [](const auto event) - void {} // Ok on all supported compilers","title":"Supported/Tested compilers"},{"location":"overview.html#configuration","text":"Macro Description BOOST_SML_VERSION Current version of [Boost].SML (ex. 1'0'0)","title":"Configuration"},{"location":"overview.html#exception-safety","text":"[Boost].SML doesn't use exceptions internally and therefore might be compiled with -fno-exceptions . If guard throws an exception State Machine will stay in a current state. If action throws an exception State Machine will be in the new state Exceptions might be caught using transition table via exception event. See Error handling .","title":"Exception Safety"},{"location":"overview.html#thread-safety","text":"[Boost].SML is not thread safe by default. Thread Safety might be enabled by defining a thread_safe policy when creating a State Machine. Lock type has to be provided. sml::sm example, sml::thread_safe std::recursive_mutex sm; sm.process_event(event{}); // thread safe call See Thread Safe Policy","title":"Thread Safety"},{"location":"overview.html#design","text":"Component Description [Front-End] Transition Table Domain Specific Language [Back-End] State Machine implementation details","title":"Design"},{"location":"overview.html#error-messages","text":"Not configurable Not callable Not transitional Not dispatchable","title":"Error messages"},{"location":"tutorial.html","text":"All code examples include boost/sml.hpp as well as declare a convienent sml namespace alias. #include boost/sml.hpp namespace sml = boost::sml; 0. Read Boost.MSM - eUML documentation Boost.MSM - UML Short Guide Boost.MSM - eUML Documentation 1. Create events and states State machine is composed of finite number of states and transitions which are triggered via events. An Event is just a unique type, which will be processed by the state machine. struct my_event { ... }; You can also create event instance in order to simplify transition table notation. auto event = sml::event my_event ; If you happen to have a Clang/GCC compiler, you can create an Event on the fly. using namespace sml; auto event = event _e; However, such event will not store any data. A State can have entry/exit behaviour executed whenever machine enters/leaves State and represents current location of the state machine flow. To create a state below snippet might be used. auto idle = sml::state class idle ; If you happen to have a Clang/GCC compiler, you can create a State on the fly. using namespace sml; auto state = idle _s; However, please notice that above solution is a non-standard extension for Clang/GCC. SML states cannot have data as data is injected directly into guards/actions instead. A state machine might be a State itself. sml::state state_machine composite; SML supports terminate state, which stops events to be processed. It defined by X . state _s = X; States are printable too. assert(string( idle ) == idle _s.c_str()); 2. Create guards and actions Guards and actions are callable objects which will be executed by the state machine in order to verify whether a transition, followed by an action should take place. Guard MUST return boolean value. auto guard1 = [] { return true; }; auto guard2 = [](int, double) { // guard with dependencies return true; }; auto guard3 = [](int, auto event, double) { // guard with an event and dependencies return true; }; struct guard4 { bool operator()() const noexcept { return true; } }; Action MUST not return. auto action1 = [] { }; auto action2 = [](int, double) { }; // action with dependencies auto action3 = [](int, auto event, double) { }; // action with an event and dependencies struct action4 { void operator()() noexcept { } }; 3. Create a transition table When we have states and events handy we can finally create a transition table which represents our transitions. SML is using eUML-like DSL in order to be as close as possible to UML design. Transition Table DSL Postfix Notation Expression Description state + event [ guard ] internal transition on event e when guard src_state / [] {} = dst_state anonymous transition with action src_state / [] {} = src_state self transition (calls on_exit/on_entry) src_state + event = dst_state external transition on event e without guard or action src_state + event [ guard ] / action = dst_state transition from src_state to dst_state on event e with guard and action src_state + event [ guard (![]{return true;} guard2) ] / (action, action2, []{}) = dst_state transition from src_state to dst_state on event e with guard and action Prefix Notation Expression Description state + event [ guard ] internal transition on event e when guard dst_state = src_state / [] {} anonymous transition with action src_state = src_state / [] {} self transition (calls on_exit/on_entry) dst_state = src_state + event external transition on event e without guard or action dst_state = src_state + event [ guard ] / action transition from src_state to dst_state on event e with guard and action dst_state = src_state + event [ guard (![]{return true;} guard2) ] / (action, action2, []{}) transition from src_state to dst_state on event e with guard and action Transition flow src_state + event [ guard ] / action = dst_state ^ | | 1. src_state + on_exit 2. dst_state + on_entry To create a transition table make_transition_table is provided. using namespace sml; // Postfix Notation make_transition_table( * src_state _s + event my_event [ guard ] / action = dst_state _s , dst_state _s + other_event _e = X ); or using namespace sml; // Prefix Notation make_transition_table( dst_state _s = * src_state _s + event my_event [ guard ] / action , X = dst_state _s + other_event _e ); 4. Set initial states Initial state tells the state machine where to start. It can be set by prefixing a State with * . using namespace sml; make_transition_table( * src_state _s + event my_event [ guard ] / action = dst_state _s, dst_state _s + event game_over = X ); Initial/Current state might be remembered by the State Machine so that whenever it will reentered the last active state will reactivated. In order to enable history you just have to replace * with postfixed (H) when declaring the initial state. using namespace sml; make_transition_table( src_state _s(H) + event my_event [ guard ] / action = dst_state _s, dst_state _s + event game_over = X ); You can have more than one initial state. All initial states will be executed in pseudo-parallel way . Such states are called Orthogonal regions . using namespace sml; make_transition_table( * region_1 _s + event my_event1 [ guard ] / action = dst_state1 _s, dst_state1 _s + event game_over = X, * region_2 _s + event my_event2 [ guard ] / action = dst_state2 _s, dst_state2 _s + event game_over = X ); 5. Create a state machine State machine is an abstraction for transition table holding current states and processing events. To create a state machine, we have to add a transition table. class example { public: auto operator()() { using namespace sml; return make_transition_table( * src_state _s + event my_event [ guard ] / action = dst_state _s, dst_state _s + event game_over = X ); } }; Having transition table configured we can create a state machine. sml::sm example sm; State machine constructor provides required dependencies for actions and guards. /---- event (injected from process_event) | auto guard = [](double d, auto event) { return true; } | \\--------\\ | auto action = [](int i){} | | | | | \\-\\ /---/ | | sml::sm example s{42, 87.0}; sml::sm example s{87.0, 42}; // order in which parameters have to passed is not specificied Passing and maintaining a lot of dependencies might be tedious and requires huge amount of boilerplate code. In order to avoid it, Dependency Injection Library might be used to automate this process. For example, we can use ext Boost.DI . auto injector = di::make_injector( di::bind .to(42) , di::bind interface .to implementation () ); auto sm = injector.create sm example (); sm.process_event(e1{}); 6. Process events State machine is a simple creature. Its main purpose is to process events. In order to do it, process_event method might be used. sml::sm example sm; sm.process_event(my_event{}); // handled sm.process_event(int{}); // not handled - unexpected_event int Process event might be also triggered on transition table. using namespace sml; return make_transition_table( * s1 _s + event my_event / process(other_event{}) = s2 _s, s2 _s + event other_event = X ); SML also provides a way to dispatch dynamically created events into the state machine. struct game_over { static constexpr auto id = SDL_QUIT; // explicit game_over(const SDL_Event ) noexcept; // optional, when defined runtime event will be passed }; enum SDL_EventType { SDL_FIRSTEVENT = 0, SDL_QUIT, SDL_KEYUP, SDL_MOUSEBUTTONUP, SDL_LASTEVENT }; //create dispatcher from state machine and range of events auto dispatch_event = sml::utility::make_dispatch_table SDL_Event, SDL_FIRSTEVENT, SDL_LASTEVENT (sm); SDL_Event event{SDL_QUIT}; dispatch_event(event, event.type); // will call sm.process(game_over{}); 8. Handle errors In case when a State Machine can't handle given event an unexpected_event is fired. make_transition_table( * src_state _s + event my_event [ guard ] / action = dst_state _s , src_state _s + unexpected_event some_event = X ); Any unexpected event might be handled too by using unexpected_event _ . make_transition_table( * src_state _s + event my_event [ guard ] / action = dst_state _s , src_state _s + unexpected_event some_event / [] { std::cout unexpected 'some_event' '\\n'; } , src_state _s + unexpected_event _ = X // any event ); In such case... sm.process_event(some_event{}); // unexpected 'some_event' sm.process_event(int{}); // terminate assert(sm.is(X)); Usually, it's handy to create additional Orthogonal region to cover this scenario, This way State causing unexpected event does not matter. make_transition_table( * idle _s + event my_event [ guard ] / action = s1 _s , s1 _s + event other_event [ guard ] / action = s2 _s , s2 _s + event yet_another_event [ guard ] / action = X // terminate (=X) the Machine or reset to another state ,* error_handler _s + unexpected_event some_event = X ); We can always check whether a State Machine is in terminate state by. assert(sm.is(sml::X)); // doesn't matter how many regions there are When exceptions are enabled (project is NOT compiled with -fno-exceptions ) they can be caught using exception name syntax. Exception handlers will be processed in the order they were defined, and exception might be used to catch anything (equivalent to catch (...) ). Please, notice that when there is no exception handler defined in the Transition Table, exception will not be handled by the State Machine. make_transition_table( * idle _s + event event / [] { throw std::runtime_error{ error }; } ,* error_handler _s + exception std::runtime_error = X , error_handler _s + exception std::logic_error = X , error_handler _s + exception / [] { cleanup...; } = X // any exception ); 9. Test it Sometimes it's useful to verify whether a state machine is in a specific state, for example, if we are in a terminate state or not. We can do it with SML using is or visit_current_states functionality. sml::sm example sm; sm.process_event(my_event{}); assert(sm.is(X)); // is(X, s1, ...) when you have orthogonal regions //or sm.visit_current_states([](auto state) { std::cout state.c_str() std::endl; }); On top of that, SML provides testing facilities to check state machine as a whole. set_current_states method is available from testing::sm in order to set state machine in a requested state. sml::sm example, sml::testing sm{fake_data...}; sm.set_current_states( s3 _s); // set_current_states( s3 _s, s1 _s, ...) for orthogonal regions sm.process_event(event{}); assert(sm.is(X)); 10. Debug it SML provides logging capabilities in order to inspect state machine flow. To enable logging you can use (Logger Policy)(user_guide.md#policies) struct my_logger { template class SM, class TEvent void log_process_event(const TEvent ) { printf( [%s][process_event] %s\\n , sml::aux::get_type_name SM (), sml::aux::get_type_name TEvent ()); } template class SM, class TGuard, class TEvent void log_guard(const TGuard , const TEvent , bool result) { printf( [%s][guard] %s %s %s\\n , sml::aux::get_type_name SM (), sml::aux::get_type_name TGuard (), sml::aux::get_type_name TEvent (), (result ? [OK] : [Reject] )); } template class SM, class TAction, class TEvent void log_action(const TAction , const TEvent ) { printf( [%s][action] %s %s\\n , sml::aux::get_type_name SM (), sml::aux::get_type_name TAction (), sml::aux::get_type_name TEvent ()); } template class SM, class TSrcState, class TDstState void log_state_change(const TSrcState src, const TDstState dst) { printf( [%s][transition] %s - %s\\n , sml::aux::get_type_name SM (), src.c_str(), dst.c_str()); } }; my_logger logger; sml::sm logging, sml::logger my_logger sm{logger}; sm.process_event(my_event{}); // will call logger appropriately","title":"Tutorial/Workshop"},{"location":"tutorial.html#0-read-boostmsm-euml-documentation","text":"Boost.MSM - UML Short Guide Boost.MSM - eUML Documentation","title":"0. Read Boost.MSM - eUML documentation"},{"location":"tutorial.html#1-create-events-and-states","text":"State machine is composed of finite number of states and transitions which are triggered via events. An Event is just a unique type, which will be processed by the state machine. struct my_event { ... }; You can also create event instance in order to simplify transition table notation. auto event = sml::event my_event ; If you happen to have a Clang/GCC compiler, you can create an Event on the fly. using namespace sml; auto event = event _e; However, such event will not store any data. A State can have entry/exit behaviour executed whenever machine enters/leaves State and represents current location of the state machine flow. To create a state below snippet might be used. auto idle = sml::state class idle ; If you happen to have a Clang/GCC compiler, you can create a State on the fly. using namespace sml; auto state = idle _s; However, please notice that above solution is a non-standard extension for Clang/GCC. SML states cannot have data as data is injected directly into guards/actions instead. A state machine might be a State itself. sml::state state_machine composite; SML supports terminate state, which stops events to be processed. It defined by X . state _s = X; States are printable too. assert(string( idle ) == idle _s.c_str());","title":"1. Create events and states"},{"location":"tutorial.html#2-create-guards-and-actions","text":"Guards and actions are callable objects which will be executed by the state machine in order to verify whether a transition, followed by an action should take place. Guard MUST return boolean value. auto guard1 = [] { return true; }; auto guard2 = [](int, double) { // guard with dependencies return true; }; auto guard3 = [](int, auto event, double) { // guard with an event and dependencies return true; }; struct guard4 { bool operator()() const noexcept { return true; } }; Action MUST not return. auto action1 = [] { }; auto action2 = [](int, double) { }; // action with dependencies auto action3 = [](int, auto event, double) { }; // action with an event and dependencies struct action4 { void operator()() noexcept { } };","title":"2. Create guards and actions"},{"location":"tutorial.html#3-create-a-transition-table","text":"When we have states and events handy we can finally create a transition table which represents our transitions. SML is using eUML-like DSL in order to be as close as possible to UML design. Transition Table DSL Postfix Notation Expression Description state + event [ guard ] internal transition on event e when guard src_state / [] {} = dst_state anonymous transition with action src_state / [] {} = src_state self transition (calls on_exit/on_entry) src_state + event = dst_state external transition on event e without guard or action src_state + event [ guard ] / action = dst_state transition from src_state to dst_state on event e with guard and action src_state + event [ guard (![]{return true;} guard2) ] / (action, action2, []{}) = dst_state transition from src_state to dst_state on event e with guard and action Prefix Notation Expression Description state + event [ guard ] internal transition on event e when guard dst_state = src_state / [] {} anonymous transition with action src_state = src_state / [] {} self transition (calls on_exit/on_entry) dst_state = src_state + event external transition on event e without guard or action dst_state = src_state + event [ guard ] / action transition from src_state to dst_state on event e with guard and action dst_state = src_state + event [ guard (![]{return true;} guard2) ] / (action, action2, []{}) transition from src_state to dst_state on event e with guard and action Transition flow src_state + event [ guard ] / action = dst_state ^ | | 1. src_state + on_exit 2. dst_state + on_entry To create a transition table make_transition_table is provided. using namespace sml; // Postfix Notation make_transition_table( * src_state _s + event my_event [ guard ] / action = dst_state _s , dst_state _s + other_event _e = X ); or using namespace sml; // Prefix Notation make_transition_table( dst_state _s = * src_state _s + event my_event [ guard ] / action , X = dst_state _s + other_event _e );","title":"3. Create a transition table"},{"location":"tutorial.html#4-set-initial-states","text":"Initial state tells the state machine where to start. It can be set by prefixing a State with * . using namespace sml; make_transition_table( * src_state _s + event my_event [ guard ] / action = dst_state _s, dst_state _s + event game_over = X ); Initial/Current state might be remembered by the State Machine so that whenever it will reentered the last active state will reactivated. In order to enable history you just have to replace * with postfixed (H) when declaring the initial state. using namespace sml; make_transition_table( src_state _s(H) + event my_event [ guard ] / action = dst_state _s, dst_state _s + event game_over = X ); You can have more than one initial state. All initial states will be executed in pseudo-parallel way . Such states are called Orthogonal regions . using namespace sml; make_transition_table( * region_1 _s + event my_event1 [ guard ] / action = dst_state1 _s, dst_state1 _s + event game_over = X, * region_2 _s + event my_event2 [ guard ] / action = dst_state2 _s, dst_state2 _s + event game_over = X );","title":"4. Set initial states"},{"location":"tutorial.html#5-create-a-state-machine","text":"State machine is an abstraction for transition table holding current states and processing events. To create a state machine, we have to add a transition table. class example { public: auto operator()() { using namespace sml; return make_transition_table( * src_state _s + event my_event [ guard ] / action = dst_state _s, dst_state _s + event game_over = X ); } }; Having transition table configured we can create a state machine. sml::sm example sm; State machine constructor provides required dependencies for actions and guards. /---- event (injected from process_event) | auto guard = [](double d, auto event) { return true; } | \\--------\\ | auto action = [](int i){} | | | | | \\-\\ /---/ | | sml::sm example s{42, 87.0}; sml::sm example s{87.0, 42}; // order in which parameters have to passed is not specificied Passing and maintaining a lot of dependencies might be tedious and requires huge amount of boilerplate code. In order to avoid it, Dependency Injection Library might be used to automate this process. For example, we can use ext Boost.DI . auto injector = di::make_injector( di::bind .to(42) , di::bind interface .to implementation () ); auto sm = injector.create sm example (); sm.process_event(e1{});","title":"5. Create a state machine"},{"location":"tutorial.html#6-process-events","text":"State machine is a simple creature. Its main purpose is to process events. In order to do it, process_event method might be used. sml::sm example sm; sm.process_event(my_event{}); // handled sm.process_event(int{}); // not handled - unexpected_event int Process event might be also triggered on transition table. using namespace sml; return make_transition_table( * s1 _s + event my_event / process(other_event{}) = s2 _s, s2 _s + event other_event = X ); SML also provides a way to dispatch dynamically created events into the state machine. struct game_over { static constexpr auto id = SDL_QUIT; // explicit game_over(const SDL_Event ) noexcept; // optional, when defined runtime event will be passed }; enum SDL_EventType { SDL_FIRSTEVENT = 0, SDL_QUIT, SDL_KEYUP, SDL_MOUSEBUTTONUP, SDL_LASTEVENT }; //create dispatcher from state machine and range of events auto dispatch_event = sml::utility::make_dispatch_table SDL_Event, SDL_FIRSTEVENT, SDL_LASTEVENT (sm); SDL_Event event{SDL_QUIT}; dispatch_event(event, event.type); // will call sm.process(game_over{});","title":"6. Process events"},{"location":"tutorial.html#8-handle-errors","text":"In case when a State Machine can't handle given event an unexpected_event is fired. make_transition_table( * src_state _s + event my_event [ guard ] / action = dst_state _s , src_state _s + unexpected_event some_event = X ); Any unexpected event might be handled too by using unexpected_event _ . make_transition_table( * src_state _s + event my_event [ guard ] / action = dst_state _s , src_state _s + unexpected_event some_event / [] { std::cout unexpected 'some_event' '\\n'; } , src_state _s + unexpected_event _ = X // any event ); In such case... sm.process_event(some_event{}); // unexpected 'some_event' sm.process_event(int{}); // terminate assert(sm.is(X)); Usually, it's handy to create additional Orthogonal region to cover this scenario, This way State causing unexpected event does not matter. make_transition_table( * idle _s + event my_event [ guard ] / action = s1 _s , s1 _s + event other_event [ guard ] / action = s2 _s , s2 _s + event yet_another_event [ guard ] / action = X // terminate (=X) the Machine or reset to another state ,* error_handler _s + unexpected_event some_event = X ); We can always check whether a State Machine is in terminate state by. assert(sm.is(sml::X)); // doesn't matter how many regions there are When exceptions are enabled (project is NOT compiled with -fno-exceptions ) they can be caught using exception name syntax. Exception handlers will be processed in the order they were defined, and exception might be used to catch anything (equivalent to catch (...) ). Please, notice that when there is no exception handler defined in the Transition Table, exception will not be handled by the State Machine. make_transition_table( * idle _s + event event / [] { throw std::runtime_error{ error }; } ,* error_handler _s + exception std::runtime_error = X , error_handler _s + exception std::logic_error = X , error_handler _s + exception / [] { cleanup...; } = X // any exception );","title":"8. Handle errors"},{"location":"tutorial.html#9-test-it","text":"Sometimes it's useful to verify whether a state machine is in a specific state, for example, if we are in a terminate state or not. We can do it with SML using is or visit_current_states functionality. sml::sm example sm; sm.process_event(my_event{}); assert(sm.is(X)); // is(X, s1, ...) when you have orthogonal regions //or sm.visit_current_states([](auto state) { std::cout state.c_str() std::endl; }); On top of that, SML provides testing facilities to check state machine as a whole. set_current_states method is available from testing::sm in order to set state machine in a requested state. sml::sm example, sml::testing sm{fake_data...}; sm.set_current_states( s3 _s); // set_current_states( s3 _s, s1 _s, ...) for orthogonal regions sm.process_event(event{}); assert(sm.is(X));","title":"9. Test it"},{"location":"tutorial.html#10-debug-it","text":"SML provides logging capabilities in order to inspect state machine flow. To enable logging you can use (Logger Policy)(user_guide.md#policies) struct my_logger { template class SM, class TEvent void log_process_event(const TEvent ) { printf( [%s][process_event] %s\\n , sml::aux::get_type_name SM (), sml::aux::get_type_name TEvent ()); } template class SM, class TGuard, class TEvent void log_guard(const TGuard , const TEvent , bool result) { printf( [%s][guard] %s %s %s\\n , sml::aux::get_type_name SM (), sml::aux::get_type_name TGuard (), sml::aux::get_type_name TEvent (), (result ? [OK] : [Reject] )); } template class SM, class TAction, class TEvent void log_action(const TAction , const TEvent ) { printf( [%s][action] %s %s\\n , sml::aux::get_type_name SM (), sml::aux::get_type_name TAction (), sml::aux::get_type_name TEvent ()); } template class SM, class TSrcState, class TDstState void log_state_change(const TSrcState src, const TDstState dst) { printf( [%s][transition] %s - %s\\n , sml::aux::get_type_name SM (), src.c_str(), dst.c_str()); } }; my_logger logger; sml::sm logging, sml::logger my_logger sm{logger}; sm.process_event(my_event{}); // will call logger appropriately","title":"10. Debug it"},{"location":"uml_vs_sml.html","text":"Unified Modeling Language\u2122 (UML\u00ae) Version 2.5 http://www.omg.org/spec/UML/2.5 Initial Pseudostate An entry point where everything starts from UML SML * \"idle\"_s Terminate Pseudostate A state which terminates the state machine (there is no escape from) UML SML sml::X External transition Conditionally updates the current state UML SML \"src_state\"_s + event [ guard ] / action = \"dst_state\"_s Anonymous transition transition without a trigger (event) UML SML \"src_state\"_s = \"dst_state\"_s","title":"UML vs SML"},{"location":"uml_vs_sml.html#unified-modeling-languagetm-uml-version-25","text":"http://www.omg.org/spec/UML/2.5","title":"Unified Modeling Language\u2122 (UML\u00ae) Version 2.5"},{"location":"uml_vs_sml.html#initial-pseudostate","text":"An entry point where everything starts from UML SML * \"idle\"_s","title":"Initial Pseudostate"},{"location":"uml_vs_sml.html#terminate-pseudostate","text":"A state which terminates the state machine (there is no escape from) UML SML sml::X","title":"Terminate Pseudostate"},{"location":"uml_vs_sml.html#external-transition","text":"Conditionally updates the current state UML SML \"src_state\"_s + event [ guard ] / action = \"dst_state\"_s","title":"External transition"},{"location":"uml_vs_sml.html#anonymous-transition","text":"transition without a trigger (event) UML SML \"src_state\"_s = \"dst_state\"_s","title":"Anonymous transition"},{"location":"user_guide.html","text":"transitional [concept] Header #include boost/sml.hpp Description Requirements for transition. Synopsis template class T concept bool transitional() { return requires(T transition) { typename T::src_state; typename T::dst_state; typename T::event; typename T::deps; T::initial; T::history; { transition.execute() } - bool; } }; Semantics transitional T Example using namespace sml; { auto transition = (\"idle\"_s = X); // Postfix Notation static_assert(transitional decltype(transition) ::value); } { auto transition = (X = \"idle\"_s); // Prefix Notation static_assert(transitional decltype(transition) ::value); } configurable [concept] Header #include boost/sml.hpp Description Requirements for the state machine. Synopsis template class SM concept bool configurable() { return requires(SM sm) { { sm.operator()() }; } }; Semantics configurable SM Example class example { auto operator()() const noexcept { return make_transition_table(); } }; static_assert(configurable example ::value); callable [concept] Header #include boost/sml.hpp Description Requirements for action and guards. Synopsis template class TResult, class T concept bool callable() { return requires(T object) { { object(...) } - TResult; } } Semantics callable SM Example auto guard = [] { return true; }; auto action = [] { }; static_assert(callable bool, decltype(guard) ::value); static_assert(callable void, decltype(action) ::value); dispatchable [concept] Header #include boost/sml.hpp Description Requirements for the dispatch table. Synopsis template class TDynamicEvent, TEvent concept bool dispatchable() { return requires(T) { typename TEvent::id; { TEvent(declval TDynamicEvent ()) }; } }; Semantics dispatchable SM Example struct runtime_event { }; struct event1 { static constexpr auto id = 1; }; struct event2 { static constexpr auto id = 2; explicit event2(const runtime_event ) {} }; static_assert(dispatchable runtime_event, event1 ::value); static_assert(dispatchable runtime_event, event2 ::value); state [core] Header #include boost/sml.hpp Description Represents a state machine state. Synopsis template class TState // no requirements, TState may be a state machine class state { public: initial operator*() const noexcept; // no requirements template class T // no requirements auto operator =(const T ) const noexcept; template class T // no requirements auto operator=(const T ) const noexcept; template class T // no requirements auto operator+(const T ) const noexcept; template class T requires callable bool, T auto operator[](const T) const noexcept; template class T requires callable void, T auto operator/(const T t) const noexcept; const char* c_str() noexcept; }; template class T, T... Chrs state unspecified operator\"\"_s() noexcept; // predefined states state unspecified X; Requirements callable Semantics state T {} Example auto idle = state class idle ; auto idle = \"idle\"_s; auto initial_state = *idle; auto history_state = idle(H); auto terminate_state = X; event [core] Header #include boost/sml.hpp Description Represents a state machine event. Synopsis template TEvent // no requirements class event { public: template class T requires callable bool, T auto operator[](const T ) const noexcept; template class T requires callable void, T auto operator/(const T t) const noexcept; }; template class TEvent event TEvent event{}; // predefined events auto on_entry = event unspecified ; auto on_exit = event unspecified ; template class TEvent unexpected_event{}; template class T exception{}; Requirements callable Semantics event T Example auto my_int_event = event int ; make_transition_table [state machine] Header #include boost/sml.hpp Description Creates a transition table. Synopsis template class... Ts requires transitional Ts ... auto make_transition_table(Ts...) noexcept; Requirements transitional Semantics make_transition_table(transitions...); Example auto transition_table_postfix_notation = make_transition_table( *\"idle_s\" + event int / [] {} = X ); auto transition_table_prefix_notation = make_transition_table( X = *\"idle_s\" + event int / [] {} ); class example { public: auto operator()() const noexcept { return make_transition_table(); } }; sm [state machine] Header #include boost/sml.hpp Description Creates a State Machine. Synopsis template class T requires configurable T class sm { public: using states = unspecified; // unique list of states using events = unspecified; // unique list of events which can be handled by the State Machine using transitions = unspecified; // list of transitions sm(sm ) = default; sm(const sm ) = delete; sm operator=(const sm ) = delete; template class... TDeps requires is_base_of TDeps, dependencies ... sm(TDeps ...) noexcept; template class TEvent // no requirements bool process_event(const TEvent ) template class TVisitor requires callable void, TVisitor void visit_current_states(const TVisitor ) const noexcept(noexcept(visitor(state{}))); template class TState bool is(const state TState ) const noexcept; template class... TStates requires sizeof...(TStates) == number_of_initial_states bool is(const state TStates ...) const noexcept; }; Expression Requirement Description Returns TDeps... is_base_of dependencies constructor process_event TEvent - process event TEvent returns true when handled, false otherwise visit_current_states TVisitor callable visit current states - is TState - verify whether any of current states equals TState true when any current state matches TState , false otherwise is TStates... size of TStates... equals number of initial states verify whether all current states match TStates... true when all states match TState... , false otherwise Semantics sml::sm T {...}; sm.process_event(TEvent{}); sm.visit_current_states([](auto state){}); sm.is(X); sm.is(s1, s2); Example struct my_event {}; class example { public: auto operator()() const noexcept { using namespace sml; return make_transition_table( *\"idle\"_s + event my_event / [](int i) { std::cout i std::endl; } = X ); } }; sml::sm example sm{42}; assert(sm.is(\"idle\"_s)); sm.process_event(int{}); // no handled, will call unexpected_event int sm.process_event(my_event{}); // handled assert(sm.is(X)); sm.visit_current_states([](auto state) { std::cout state.c_str() std::endl; }); policies [state machine] Header #include boost/sml.hpp Description Additional State Machine configurations. Synopsis thread_safe Lockable logger Loggable Expression Requirement Description Example Lockable lock/unlock Lockable type std::mutex , std::recursive_mutex Loggable log_process_event/log_state_change/log_action/log_guard Loggable type - Example sml::sm example, sml::thread_safe std::recursive_mutex sm; // thread safe policy sml::sm example, sml::logger my_logger sm; // logger policy sml::sm example, sml::thread_safe std::recursive_mutex , sml::logger my_logger sm; // thread safe and logger policy sml::sm example, sml::logger my_logger , sml::thread_safe std::recursive_mutex sm; // thread safe and logger policy testing::sm [testing] Header #include boost/sml/testing/state_machine.hpp Description Creates a state machine with testing capabilities. Synopsis namespace testing { template class T class sm : public sml::sm T { public: using sml::sm T ::sm; template class... TStates void set_current_states(const detail::state TStates ...) noexcept; }; } Expression Requirement Description Returns set_current_states TStates... - set current states Semantics sml::testing::sm T {...}; sm.set_current_states(\"s1\"_s); Example sml::testing::sm T {inject_fake_data...}; sm.set_current_states(\"s1\"_s); sm.process_event(TEvent{}); sm.is(X); make_dispatch_table [utility] Header #include boost/sml/utility/dispatch_table.hpp Description Creates a dispatch table to handle runtime events. Synopsis namespace utility { template class TEvent, int EventRangeBegin, int EventRangeBegin, class SM requires dispatchable TEvent, typename SM::events callable bool, (TEvent, int) make_dispatch_table(sm SM ) noexcept; } Requirements dispatchable Semantics sml::utility::make_dispatch_table T, 0, 10 (sm); Example struct runtime_event { int id = 0; }; struct event1 { static constexpr auto id = 1; event1(const runtime_event ) {} }; auto dispatch_event = sml::utility::make_dispatch_table runtime_event, 1 /*min*/, 5 /*max*/ (sm); dispatch_event(event, event.id);","title":"User Guide"},{"location":"user_guide.html#transitional-concept","text":"Header #include boost/sml.hpp Description Requirements for transition. Synopsis template class T concept bool transitional() { return requires(T transition) { typename T::src_state; typename T::dst_state; typename T::event; typename T::deps; T::initial; T::history; { transition.execute() } - bool; } }; Semantics transitional T Example using namespace sml; { auto transition = (\"idle\"_s = X); // Postfix Notation static_assert(transitional decltype(transition) ::value); } { auto transition = (X = \"idle\"_s); // Prefix Notation static_assert(transitional decltype(transition) ::value); }","title":"transitional [concept]"},{"location":"user_guide.html#configurable-concept","text":"Header #include boost/sml.hpp Description Requirements for the state machine. Synopsis template class SM concept bool configurable() { return requires(SM sm) { { sm.operator()() }; } }; Semantics configurable SM Example class example { auto operator()() const noexcept { return make_transition_table(); } }; static_assert(configurable example ::value);","title":"configurable [concept]"},{"location":"user_guide.html#callable-concept","text":"Header #include boost/sml.hpp Description Requirements for action and guards. Synopsis template class TResult, class T concept bool callable() { return requires(T object) { { object(...) } - TResult; } } Semantics callable SM Example auto guard = [] { return true; }; auto action = [] { }; static_assert(callable bool, decltype(guard) ::value); static_assert(callable void, decltype(action) ::value);","title":"callable [concept]"},{"location":"user_guide.html#dispatchable-concept","text":"Header #include boost/sml.hpp Description Requirements for the dispatch table. Synopsis template class TDynamicEvent, TEvent concept bool dispatchable() { return requires(T) { typename TEvent::id; { TEvent(declval TDynamicEvent ()) }; } }; Semantics dispatchable SM Example struct runtime_event { }; struct event1 { static constexpr auto id = 1; }; struct event2 { static constexpr auto id = 2; explicit event2(const runtime_event ) {} }; static_assert(dispatchable runtime_event, event1 ::value); static_assert(dispatchable runtime_event, event2 ::value);","title":"dispatchable [concept]"},{"location":"user_guide.html#state-core","text":"Header #include boost/sml.hpp Description Represents a state machine state. Synopsis template class TState // no requirements, TState may be a state machine class state { public: initial operator*() const noexcept; // no requirements template class T // no requirements auto operator =(const T ) const noexcept; template class T // no requirements auto operator=(const T ) const noexcept; template class T // no requirements auto operator+(const T ) const noexcept; template class T requires callable bool, T auto operator[](const T) const noexcept; template class T requires callable void, T auto operator/(const T t) const noexcept; const char* c_str() noexcept; }; template class T, T... Chrs state unspecified operator\"\"_s() noexcept; // predefined states state unspecified X; Requirements callable Semantics state T {} Example auto idle = state class idle ; auto idle = \"idle\"_s; auto initial_state = *idle; auto history_state = idle(H); auto terminate_state = X;","title":"state [core]"},{"location":"user_guide.html#event-core","text":"Header #include boost/sml.hpp Description Represents a state machine event. Synopsis template TEvent // no requirements class event { public: template class T requires callable bool, T auto operator[](const T ) const noexcept; template class T requires callable void, T auto operator/(const T t) const noexcept; }; template class TEvent event TEvent event{}; // predefined events auto on_entry = event unspecified ; auto on_exit = event unspecified ; template class TEvent unexpected_event{}; template class T exception{}; Requirements callable Semantics event T Example auto my_int_event = event int ;","title":"event [core]"},{"location":"user_guide.html#make_transition_table-state-machine","text":"Header #include boost/sml.hpp Description Creates a transition table. Synopsis template class... Ts requires transitional Ts ... auto make_transition_table(Ts...) noexcept; Requirements transitional Semantics make_transition_table(transitions...); Example auto transition_table_postfix_notation = make_transition_table( *\"idle_s\" + event int / [] {} = X ); auto transition_table_prefix_notation = make_transition_table( X = *\"idle_s\" + event int / [] {} ); class example { public: auto operator()() const noexcept { return make_transition_table(); } };","title":"make_transition_table [state machine]"},{"location":"user_guide.html#sm-state-machine","text":"Header #include boost/sml.hpp Description Creates a State Machine. Synopsis template class T requires configurable T class sm { public: using states = unspecified; // unique list of states using events = unspecified; // unique list of events which can be handled by the State Machine using transitions = unspecified; // list of transitions sm(sm ) = default; sm(const sm ) = delete; sm operator=(const sm ) = delete; template class... TDeps requires is_base_of TDeps, dependencies ... sm(TDeps ...) noexcept; template class TEvent // no requirements bool process_event(const TEvent ) template class TVisitor requires callable void, TVisitor void visit_current_states(const TVisitor ) const noexcept(noexcept(visitor(state{}))); template class TState bool is(const state TState ) const noexcept; template class... TStates requires sizeof...(TStates) == number_of_initial_states bool is(const state TStates ...) const noexcept; }; Expression Requirement Description Returns TDeps... is_base_of dependencies constructor process_event TEvent - process event TEvent returns true when handled, false otherwise visit_current_states TVisitor callable visit current states - is TState - verify whether any of current states equals TState true when any current state matches TState , false otherwise is TStates... size of TStates... equals number of initial states verify whether all current states match TStates... true when all states match TState... , false otherwise Semantics sml::sm T {...}; sm.process_event(TEvent{}); sm.visit_current_states([](auto state){}); sm.is(X); sm.is(s1, s2); Example struct my_event {}; class example { public: auto operator()() const noexcept { using namespace sml; return make_transition_table( *\"idle\"_s + event my_event / [](int i) { std::cout i std::endl; } = X ); } }; sml::sm example sm{42}; assert(sm.is(\"idle\"_s)); sm.process_event(int{}); // no handled, will call unexpected_event int sm.process_event(my_event{}); // handled assert(sm.is(X)); sm.visit_current_states([](auto state) { std::cout state.c_str() std::endl; });","title":"sm [state machine]"},{"location":"user_guide.html#policies-state-machine","text":"Header #include boost/sml.hpp Description Additional State Machine configurations. Synopsis thread_safe Lockable logger Loggable Expression Requirement Description Example Lockable lock/unlock Lockable type std::mutex , std::recursive_mutex Loggable log_process_event/log_state_change/log_action/log_guard Loggable type - Example sml::sm example, sml::thread_safe std::recursive_mutex sm; // thread safe policy sml::sm example, sml::logger my_logger sm; // logger policy sml::sm example, sml::thread_safe std::recursive_mutex , sml::logger my_logger sm; // thread safe and logger policy sml::sm example, sml::logger my_logger , sml::thread_safe std::recursive_mutex sm; // thread safe and logger policy","title":"policies [state machine]"},{"location":"user_guide.html#testingsm-testing","text":"Header #include boost/sml/testing/state_machine.hpp Description Creates a state machine with testing capabilities. Synopsis namespace testing { template class T class sm : public sml::sm T { public: using sml::sm T ::sm; template class... TStates void set_current_states(const detail::state TStates ...) noexcept; }; } Expression Requirement Description Returns set_current_states TStates... - set current states Semantics sml::testing::sm T {...}; sm.set_current_states(\"s1\"_s); Example sml::testing::sm T {inject_fake_data...}; sm.set_current_states(\"s1\"_s); sm.process_event(TEvent{}); sm.is(X);","title":"testing::sm [testing]"},{"location":"user_guide.html#make_dispatch_table-utility","text":"Header #include boost/sml/utility/dispatch_table.hpp Description Creates a dispatch table to handle runtime events. Synopsis namespace utility { template class TEvent, int EventRangeBegin, int EventRangeBegin, class SM requires dispatchable TEvent, typename SM::events callable bool, (TEvent, int) make_dispatch_table(sm SM ) noexcept; } Requirements dispatchable Semantics sml::utility::make_dispatch_table T, 0, 10 (sm); Example struct runtime_event { int id = 0; }; struct event1 { static constexpr auto id = 1; event1(const runtime_event ) {} }; auto dispatch_event = sml::utility::make_dispatch_table runtime_event, 1 /*min*/, 5 /*max*/ (sm); dispatch_event(event, event.id);","title":"make_dispatch_table [utility]"},{"location":"cppcon-2018/reveal.js/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com . Table of contents Online Editor Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax Installation Basic setup Full setup Folder Structure License More reading Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com . Instructions Markup Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section Element Attributes Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuring marked We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://github.com/chjj/marked#options-1 markdown: { smartypants: true } }); Configuration At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded To load these dependencies, reveal.js requires head.js (a script loading library) to be loaded before reveal.js. Ready Event A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS. Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); Custom Key Bindings Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional) Slide Changed Event A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Color Backgrounds All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section Image Backgrounds By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section Video Backgrounds Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom . Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the zenburn theme: lib/css/zenburn.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' }); Overview mode Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Embedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a webserver. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Separate pages for fragments Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false. Page size Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page. Print stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script Instructions Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a semi-transparent box on top of the slide. If you'd rather print them on a separate page after the slide, set showNotes: \"separate-page\" . Speaker notes clock and timers The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide section by setting the data-timing attribute. Both values are in numbers of seconds. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex . socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2018 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js) <a href=\"https://slides.com?ref=github\"><img src=\"https://s3.amazonaws.com/static.slid.es/images/slides-github-banner-320x40.png?1\" alt=\"Slides\" width=\"160\" height=\"20\"></a>"},{"location":"cppcon-2018/reveal.js/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com .","title":"reveal.js  "},{"location":"cppcon-2018/reveal.js/README.html#table-of-contents","text":"Online Editor Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax Installation Basic setup Full setup Folder Structure License","title":"Table of contents"},{"location":"cppcon-2018/reveal.js/README.html#more-reading","text":"Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading"},{"location":"cppcon-2018/reveal.js/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com .","title":"Online Editor"},{"location":"cppcon-2018/reveal.js/README.html#instructions","text":"","title":"Instructions"},{"location":"cppcon-2018/reveal.js/README.html#markup","text":"Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"cppcon-2018/reveal.js/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section","title":"Markdown"},{"location":"cppcon-2018/reveal.js/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section","title":"External Markdown"},{"location":"cppcon-2018/reveal.js/README.html#element-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"cppcon-2018/reveal.js/README.html#slide-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"cppcon-2018/reveal.js/README.html#configuring-marked","text":"We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://github.com/chjj/marked#options-1 markdown: { smartypants: true } });","title":"Configuring marked"},{"location":"cppcon-2018/reveal.js/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"cppcon-2018/reveal.js/README.html#presentation-size","text":"All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 });","title":"Presentation Size"},{"location":"cppcon-2018/reveal.js/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded To load these dependencies, reveal.js requires head.js (a script loading library) to be loaded before reveal.js.","title":"Dependencies"},{"location":"cppcon-2018/reveal.js/README.html#ready-event","text":"A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.","title":"Ready Event"},{"location":"cppcon-2018/reveal.js/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"cppcon-2018/reveal.js/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"cppcon-2018/reveal.js/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"cppcon-2018/reveal.js/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"cppcon-2018/reveal.js/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding();","title":"API"},{"location":"cppcon-2018/reveal.js/README.html#custom-key-bindings","text":"Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional)","title":"Custom Key Bindings"},{"location":"cppcon-2018/reveal.js/README.html#slide-changed-event","text":"A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"cppcon-2018/reveal.js/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"cppcon-2018/reveal.js/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"cppcon-2018/reveal.js/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe.","title":"Slide Backgrounds"},{"location":"cppcon-2018/reveal.js/README.html#color-backgrounds","text":"All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section","title":"Color Backgrounds"},{"location":"cppcon-2018/reveal.js/README.html#image-backgrounds","text":"By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section","title":"Image Backgrounds"},{"location":"cppcon-2018/reveal.js/README.html#video-backgrounds","text":"Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section","title":"Video Backgrounds"},{"location":"cppcon-2018/reveal.js/README.html#iframe-backgrounds","text":"Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section","title":"Iframe Backgrounds"},{"location":"cppcon-2018/reveal.js/README.html#background-transitions","text":"Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Background Transitions"},{"location":"cppcon-2018/reveal.js/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"cppcon-2018/reveal.js/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom .","title":"Slide Transitions"},{"location":"cppcon-2018/reveal.js/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"cppcon-2018/reveal.js/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"cppcon-2018/reveal.js/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"cppcon-2018/reveal.js/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the zenburn theme: lib/css/zenburn.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code syntax highlighting"},{"location":"cppcon-2018/reveal.js/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' });","title":"Slide number"},{"location":"cppcon-2018/reveal.js/README.html#overview-mode","text":"Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"cppcon-2018/reveal.js/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"cppcon-2018/reveal.js/README.html#embedded-media","text":"Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.","title":"Embedded media"},{"location":"cppcon-2018/reveal.js/README.html#embedded-iframes","text":"reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded iframes"},{"location":"cppcon-2018/reveal.js/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"cppcon-2018/reveal.js/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"cppcon-2018/reveal.js/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a webserver. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.","title":"PDF Export"},{"location":"cppcon-2018/reveal.js/README.html#separate-pages-for-fragments","text":"Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false.","title":"Separate pages for fragments"},{"location":"cppcon-2018/reveal.js/README.html#page-size","text":"Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.","title":"Page size"},{"location":"cppcon-2018/reveal.js/README.html#print-stylesheet","text":"To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script","title":"Print stylesheet"},{"location":"cppcon-2018/reveal.js/README.html#instructions_1","text":"Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project.","title":"Instructions"},{"location":"cppcon-2018/reveal.js/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"cppcon-2018/reveal.js/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"cppcon-2018/reveal.js/README.html#share-and-print-speaker-notes","text":"Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a semi-transparent box on top of the slide. If you'd rather print them on a separate page after the slide, set showNotes: \"separate-page\" .","title":"Share and Print Speaker Notes"},{"location":"cppcon-2018/reveal.js/README.html#speaker-notes-clock-and-timers","text":"The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide section by setting the data-timing attribute. Both values are in numbers of seconds.","title":"Speaker notes clock and timers"},{"location":"cppcon-2018/reveal.js/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"cppcon-2018/reveal.js/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients","title":"Multiplexing"},{"location":"cppcon-2018/reveal.js/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"cppcon-2018/reveal.js/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"cppcon-2018/reveal.js/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex .","title":"Socket.io server"},{"location":"cppcon-2018/reveal.js/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"cppcon-2018/reveal.js/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"cppcon-2018/reveal.js/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"cppcon-2018/reveal.js/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"cppcon-2018/reveal.js/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 .","title":"Full setup"},{"location":"cppcon-2018/reveal.js/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"cppcon-2018/reveal.js/README.html#license","text":"MIT licensed Copyright (C) 2018 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"cppcon-2018/reveal.js/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"cppcon-2018/reveal.js/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"cppcon-2018/reveal.js/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"cppcon-2018/reveal.js/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"cppcon-2018/reveal.js/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"cppcon-2018/reveal.js/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"cppcon-2018/reveal.js/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"cppcon-2018/reveal.js/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"cppcon-2018/reveal.js/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#external-33","text":"","title":"External 3.3"},{"location":"cppcon-2018/reveal.js/test/simple.html","text":"Slide 1.1 var a = 1; Slide 1.2 Slide 2","title":"Simple"},{"location":"cppcon-2018/reveal.js/test/simple.html#slide-11","text":"var a = 1;","title":"Slide 1.1"},{"location":"cppcon-2018/reveal.js/test/simple.html#slide-12","text":"","title":"Slide 1.2"},{"location":"cppcon-2018/reveal.js/test/simple.html#slide-2","text":"","title":"Slide 2"},{"location":"cppcon-2021/reveal.js/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown support , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com . Supporting reveal.js This project was started and is maintained by @hakimel with the help of many contributions from the community . The best way to support the project is to become a paying member of Slides.com \u2014the reveal.js presentation platform that Hakim is building. Table of contents Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Custom Key Bindings Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Plugins Multiplexing Master presentation Client presentation Socket.io server MathJax License More reading Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com . Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (9.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) Instructions Markup Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section Element Attributes Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuring marked We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } }); Configuration At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Specify the total time in seconds that is available to // present. If this is set to a nonzero value, the pacing // timer will work out the time available for each slide, // instead of using the defaultTiming value totalTime: 0, // Specify the minimum amount of time you want to allot to // each slide, if using the totalTime calculation method. If // the automated time allocation causes slide pacing to fall // below this threshold, then you will see an alert in the // speaker notes window minimumTimePerSlide: 0; // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Number of slides away from the current that are visible on mobile // devices. It is advisable to set this to a lower number than // viewDistance in order to save resources. mobileViewDistance: 2, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS. Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Vertical Slide Navigation Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action: Navigation Mode You can fine tune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presentations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 - 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 - 2.3. Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section Lazy Loading Iframes Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . section iframe data-src= http://hakim.se data-preload /iframe /section You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible. API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns an array with all horizontal/vertical slides in the deck Reveal.getHorizontalSlides(); Reveal.getVerticalSlides(); // Checks if the presentation contains two or more // horizontal/vertical slides Reveal.hasHorizontalSlides(); Reveal.hasVerticalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element Reveal.getRevealElement(); // div class= reveal ... /div Custom Key Bindings Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional) Slide Changed Event A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Color Backgrounds All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section Image Backgrounds By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section Video Backgrounds Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Iframes are lazy-loaded when they become visible. If you'd like to preload iframes ahead of time, you can append a data-preload attribute to the slide section . You can also enable preloading globally for all iframes using the preloadIframes configuration option. Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom . Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code Syntax Highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Line Numbers Highlights To enable line numbers, add data-line-numbers to your code tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted: pre code class= hljs data-line-numbers= 4,8-11 import React, { useState } from 'react'; function Example() { const [count, setCount] = useState(0); return ( div p You clicked {count} times /p button onClick={() = setCount(count + 1)} Click me /button /div ); } /code /pre Step-by-step Highlights You can step through multiple code highlights on the same code block. Delimit each of your highlight steps with the | character. For example data-line-numbers=\"1|2-3|4,6-10\" will produce three steps. It will start by highlighting line 1, next step is lines 2-3, and finally line 4 and 6 through 10. Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function( slide ) { // Ignore numbering of vertical slides return [ Reveal.getIndices( slide ).h ]; }}); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' }); Overview mode Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Embedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched Resize Event When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } ); postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); postMessage Events When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName === 'slidechanged' ) { // Slide changed, see data.state for slide number } } ); postMessage Callbacks When you call any method via the postMessage API, reveal.js will dispatch a message with the return value. This is done so that you can call a getter method and see what the result is. Check out this example: revealWindow .postMessage( JSON.stringify({ method: 'getTotalSlides' }), '*' ); window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); // `data.method`` is the method that we invoked if( data.namespace === 'reveal' data.eventName === 'callback' data.method === 'getTotalSlides' ) { data.result // = the total number of slides } } ); Turning postMessage on/off This cross-window messaging can be toggled on or off using configuration flags. These are the default values. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Separate pages for fragments Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false. Page size Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page. Print stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script Instructions Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" . Speaker notes clock and timers The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Alternatively, you can enable the timer by setting totalTime , which sets the total length of your presentation (also in seconds). If both values are specified, totalTime wins and defaultTiming is ignored. Regardless of the baseline timing method, timings can also be given per slide section by setting the data-timing attribute (again, in seconds). Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (9.0.0 or later) Run npm install Run node plugin/notes-server Plugins Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ) . Registered plugin instances can optionally expose an \"init\" function that reveal.js will call to initialize them. When reveal.js is booted up via Reveal.initialize() , it will go through all registered plugins and invoke their \"init\" methods. If the \"init\" method returns a Promise, reveal.js will wait for that promise to be fulfilled before finishing the startup sequence and firing the ready event. Here's an example of a plugin that does some asynchronous work before reveal.js can proceed: let MyPlugin = { init: () = new Promise( resolve = setTimeout( resolve, 3000 ) ) }; Reveal.registerPlugin( 'myPlugin', MyPlugin ); Reveal.addEventListener( 'ready', () = console.log( 'Three seconds later...' ) ); Reveal.initialize(); Note that reveal.js will not wait for init Promise fulfillment if the plugin is loaded as an async dependency . If the plugin's init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence. Retrieving Plugins If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ) . If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ) . Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via https://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit https://example.com/token , where https://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex . socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full', // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: { RR: {\\\\bf R} } } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. MathJax in Markdown If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$` License MIT licensed Copyright (C) 2020 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js) <a href=\"https://slides.com?ref=github\"><img src=\"https://s3.amazonaws.com/static.slid.es/images/slides-github-banner-320x40.png?1\" alt=\"Slides\" width=\"160\" height=\"20\"></a>"},{"location":"cppcon-2021/reveal.js/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown support , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com .","title":"reveal.js  "},{"location":"cppcon-2021/reveal.js/README.html#supporting-revealjs","text":"This project was started and is maintained by @hakimel with the help of many contributions from the community . The best way to support the project is to become a paying member of Slides.com \u2014the reveal.js presentation platform that Hakim is building.","title":"Supporting reveal.js"},{"location":"cppcon-2021/reveal.js/README.html#table-of-contents","text":"Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Custom Key Bindings Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Plugins Multiplexing Master presentation Client presentation Socket.io server MathJax License","title":"Table of contents"},{"location":"cppcon-2021/reveal.js/README.html#more-reading","text":"Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading"},{"location":"cppcon-2021/reveal.js/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com .","title":"Online Editor"},{"location":"cppcon-2021/reveal.js/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"cppcon-2021/reveal.js/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"cppcon-2021/reveal.js/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (9.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 .","title":"Full setup"},{"location":"cppcon-2021/reveal.js/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"cppcon-2021/reveal.js/README.html#instructions","text":"","title":"Instructions"},{"location":"cppcon-2021/reveal.js/README.html#markup","text":"Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"cppcon-2021/reveal.js/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section","title":"Markdown"},{"location":"cppcon-2021/reveal.js/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section","title":"External Markdown"},{"location":"cppcon-2021/reveal.js/README.html#element-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"cppcon-2021/reveal.js/README.html#slide-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"cppcon-2021/reveal.js/README.html#configuring-marked","text":"We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } });","title":"Configuring marked"},{"location":"cppcon-2021/reveal.js/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Specify the total time in seconds that is available to // present. If this is set to a nonzero value, the pacing // timer will work out the time available for each slide, // instead of using the defaultTiming value totalTime: 0, // Specify the minimum amount of time you want to allot to // each slide, if using the totalTime calculation method. If // the automated time allocation causes slide pacing to fall // below this threshold, then you will see an alert in the // speaker notes window minimumTimePerSlide: 0; // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Number of slides away from the current that are visible on mobile // devices. It is advisable to set this to a lower number than // viewDistance in order to save resources. mobileViewDistance: 2, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"cppcon-2021/reveal.js/README.html#presentation-size","text":"All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 });","title":"Presentation Size"},{"location":"cppcon-2021/reveal.js/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"cppcon-2021/reveal.js/README.html#ready-event","text":"A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.","title":"Ready Event"},{"location":"cppcon-2021/reveal.js/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"cppcon-2021/reveal.js/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"cppcon-2021/reveal.js/README.html#vertical-slide-navigation","text":"Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action:","title":"Vertical Slide Navigation"},{"location":"cppcon-2021/reveal.js/README.html#navigation-mode","text":"You can fine tune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presentations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 - 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 - 2.3.","title":"Navigation Mode"},{"location":"cppcon-2021/reveal.js/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"cppcon-2021/reveal.js/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"cppcon-2021/reveal.js/README.html#lazy-loading-iframes","text":"Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . section iframe data-src= http://hakim.se data-preload /iframe /section You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible.","title":"Lazy Loading Iframes"},{"location":"cppcon-2021/reveal.js/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns an array with all horizontal/vertical slides in the deck Reveal.getHorizontalSlides(); Reveal.getVerticalSlides(); // Checks if the presentation contains two or more // horizontal/vertical slides Reveal.hasHorizontalSlides(); Reveal.hasVerticalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element Reveal.getRevealElement(); // div class= reveal ... /div","title":"API"},{"location":"cppcon-2021/reveal.js/README.html#custom-key-bindings","text":"Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional)","title":"Custom Key Bindings"},{"location":"cppcon-2021/reveal.js/README.html#slide-changed-event","text":"A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"cppcon-2021/reveal.js/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"cppcon-2021/reveal.js/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"cppcon-2021/reveal.js/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe.","title":"Slide Backgrounds"},{"location":"cppcon-2021/reveal.js/README.html#color-backgrounds","text":"All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section","title":"Color Backgrounds"},{"location":"cppcon-2021/reveal.js/README.html#image-backgrounds","text":"By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section","title":"Image Backgrounds"},{"location":"cppcon-2021/reveal.js/README.html#video-backgrounds","text":"Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section","title":"Video Backgrounds"},{"location":"cppcon-2021/reveal.js/README.html#iframe-backgrounds","text":"Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Iframes are lazy-loaded when they become visible. If you'd like to preload iframes ahead of time, you can append a data-preload attribute to the slide section . You can also enable preloading globally for all iframes using the preloadIframes configuration option.","title":"Iframe Backgrounds"},{"location":"cppcon-2021/reveal.js/README.html#background-transitions","text":"Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Background Transitions"},{"location":"cppcon-2021/reveal.js/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"cppcon-2021/reveal.js/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom .","title":"Slide Transitions"},{"location":"cppcon-2021/reveal.js/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"cppcon-2021/reveal.js/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"cppcon-2021/reveal.js/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"cppcon-2021/reveal.js/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code Syntax Highlighting"},{"location":"cppcon-2021/reveal.js/README.html#line-numbers-highlights","text":"To enable line numbers, add data-line-numbers to your code tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted: pre code class= hljs data-line-numbers= 4,8-11 import React, { useState } from 'react'; function Example() { const [count, setCount] = useState(0); return ( div p You clicked {count} times /p button onClick={() = setCount(count + 1)} Click me /button /div ); } /code /pre","title":"Line Numbers &amp; Highlights"},{"location":"cppcon-2021/reveal.js/README.html#step-by-step-highlights","text":"You can step through multiple code highlights on the same code block. Delimit each of your highlight steps with the | character. For example data-line-numbers=\"1|2-3|4,6-10\" will produce three steps. It will start by highlighting line 1, next step is lines 2-3, and finally line 4 and 6 through 10.","title":"Step-by-step Highlights"},{"location":"cppcon-2021/reveal.js/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function( slide ) { // Ignore numbering of vertical slides return [ Reveal.getIndices( slide ).h ]; }}); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' });","title":"Slide number"},{"location":"cppcon-2021/reveal.js/README.html#overview-mode","text":"Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"cppcon-2021/reveal.js/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"cppcon-2021/reveal.js/README.html#embedded-media","text":"Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.","title":"Embedded media"},{"location":"cppcon-2021/reveal.js/README.html#embedded-iframes","text":"reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded iframes"},{"location":"cppcon-2021/reveal.js/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"cppcon-2021/reveal.js/README.html#resize-event","text":"When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } );","title":"Resize Event"},{"location":"cppcon-2021/reveal.js/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' );","title":"postMessage API"},{"location":"cppcon-2021/reveal.js/README.html#postmessage-events","text":"When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName === 'slidechanged' ) { // Slide changed, see data.state for slide number } } );","title":"postMessage Events"},{"location":"cppcon-2021/reveal.js/README.html#postmessage-callbacks","text":"When you call any method via the postMessage API, reveal.js will dispatch a message with the return value. This is done so that you can call a getter method and see what the result is. Check out this example: revealWindow .postMessage( JSON.stringify({ method: 'getTotalSlides' }), '*' ); window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); // `data.method`` is the method that we invoked if( data.namespace === 'reveal' data.eventName === 'callback' data.method === 'getTotalSlides' ) { data.result // = the total number of slides } } );","title":"postMessage Callbacks"},{"location":"cppcon-2021/reveal.js/README.html#turning-postmessage-onoff","text":"This cross-window messaging can be toggled on or off using configuration flags. These are the default values. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"Turning postMessage on/off"},{"location":"cppcon-2021/reveal.js/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.","title":"PDF Export"},{"location":"cppcon-2021/reveal.js/README.html#separate-pages-for-fragments","text":"Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false.","title":"Separate pages for fragments"},{"location":"cppcon-2021/reveal.js/README.html#page-size","text":"Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.","title":"Page size"},{"location":"cppcon-2021/reveal.js/README.html#print-stylesheet","text":"To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script","title":"Print stylesheet"},{"location":"cppcon-2021/reveal.js/README.html#instructions_1","text":"Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project.","title":"Instructions"},{"location":"cppcon-2021/reveal.js/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"cppcon-2021/reveal.js/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"cppcon-2021/reveal.js/README.html#share-and-print-speaker-notes","text":"Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" .","title":"Share and Print Speaker Notes"},{"location":"cppcon-2021/reveal.js/README.html#speaker-notes-clock-and-timers","text":"The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Alternatively, you can enable the timer by setting totalTime , which sets the total length of your presentation (also in seconds). If both values are specified, totalTime wins and defaultTiming is ignored. Regardless of the baseline timing method, timings can also be given per slide section by setting the data-timing attribute (again, in seconds).","title":"Speaker notes clock and timers"},{"location":"cppcon-2021/reveal.js/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (9.0.0 or later) Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"cppcon-2021/reveal.js/README.html#plugins","text":"Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ) . Registered plugin instances can optionally expose an \"init\" function that reveal.js will call to initialize them. When reveal.js is booted up via Reveal.initialize() , it will go through all registered plugins and invoke their \"init\" methods. If the \"init\" method returns a Promise, reveal.js will wait for that promise to be fulfilled before finishing the startup sequence and firing the ready event. Here's an example of a plugin that does some asynchronous work before reveal.js can proceed: let MyPlugin = { init: () = new Promise( resolve = setTimeout( resolve, 3000 ) ) }; Reveal.registerPlugin( 'myPlugin', MyPlugin ); Reveal.addEventListener( 'ready', () = console.log( 'Three seconds later...' ) ); Reveal.initialize(); Note that reveal.js will not wait for init Promise fulfillment if the plugin is loaded as an async dependency . If the plugin's init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence.","title":"Plugins"},{"location":"cppcon-2021/reveal.js/README.html#retrieving-plugins","text":"If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ) . If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ) .","title":"Retrieving Plugins"},{"location":"cppcon-2021/reveal.js/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients","title":"Multiplexing"},{"location":"cppcon-2021/reveal.js/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"cppcon-2021/reveal.js/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via https://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"cppcon-2021/reveal.js/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit https://example.com/token , where https://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex .","title":"Socket.io server"},{"location":"cppcon-2021/reveal.js/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"cppcon-2021/reveal.js/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full', // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: { RR: {\\\\bf R} } } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"cppcon-2021/reveal.js/README.html#mathjax-in-markdown","text":"If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$`","title":"MathJax in Markdown"},{"location":"cppcon-2021/reveal.js/README.html#license","text":"MIT licensed Copyright (C) 2020 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"cppcon-2021/reveal.js/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"cppcon-2021/reveal.js/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"cppcon-2021/reveal.js/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"cppcon-2021/reveal.js/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"cppcon-2021/reveal.js/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"cppcon-2021/reveal.js/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"cppcon-2021/reveal.js/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"cppcon-2021/reveal.js/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"cppcon-2021/reveal.js/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"cppcon-2021/reveal.js/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"cppcon-2021/reveal.js/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"cppcon-2021/reveal.js/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"cppcon-2021/reveal.js/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"cppcon-2021/reveal.js/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"cppcon-2021/reveal.js/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"cppcon-2021/reveal.js/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"cppcon-2021/reveal.js/plugin/markdown/example.html#external-33","text":"","title":"External 3.3"},{"location":"cppcon-2021/reveal.js/test/simple.html","text":"Slide 1.1 var a = 1; Slide 1.2 Slide 2","title":"Simple"},{"location":"cppcon-2021/reveal.js/test/simple.html#slide-11","text":"var a = 1;","title":"Slide 1.1"},{"location":"cppcon-2021/reveal.js/test/simple.html#slide-12","text":"","title":"Slide 1.2"},{"location":"cppcon-2021/reveal.js/test/simple.html#slide-2","text":"","title":"Slide 2"},{"location":"cppnow-2016/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere. More reading: Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com . Instructions Markup Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section Element Attributes Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuration At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); Slide Changed Event A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Slide number If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); Overview mode Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details: Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc. socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js)"},{"location":"cppnow-2016/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere.","title":"reveal.js"},{"location":"cppnow-2016/README.html#more-reading","text":"Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading:"},{"location":"cppnow-2016/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com .","title":"Online Editor"},{"location":"cppnow-2016/README.html#instructions","text":"","title":"Instructions"},{"location":"cppnow-2016/README.html#markup","text":"Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"cppnow-2016/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section","title":"Markdown"},{"location":"cppnow-2016/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section","title":"External Markdown"},{"location":"cppnow-2016/README.html#element-attributes","text":"Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"cppnow-2016/README.html#slide-attributes","text":"Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"cppnow-2016/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"cppnow-2016/README.html#presentation-size","text":"All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 });","title":"Presentation Size"},{"location":"cppnow-2016/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"cppnow-2016/README.html#ready-event","text":"A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } );","title":"Ready Event"},{"location":"cppnow-2016/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"cppnow-2016/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"cppnow-2016/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"cppnow-2016/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"cppnow-2016/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding();","title":"API"},{"location":"cppnow-2016/README.html#slide-changed-event","text":"A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"cppnow-2016/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"cppnow-2016/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"cppnow-2016/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Slide Backgrounds"},{"location":"cppnow-2016/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"cppnow-2016/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section","title":"Slide Transitions"},{"location":"cppnow-2016/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"cppnow-2016/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"cppnow-2016/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"cppnow-2016/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code syntax highlighting"},{"location":"cppnow-2016/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' });","title":"Slide number"},{"location":"cppnow-2016/README.html#overview-mode","text":"Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"cppnow-2016/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"cppnow-2016/README.html#embedded-media","text":"Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded media"},{"location":"cppnow-2016/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"cppnow-2016/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"cppnow-2016/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project.","title":"PDF Export"},{"location":"cppnow-2016/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"cppnow-2016/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"cppnow-2016/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"cppnow-2016/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details:","title":"Multiplexing"},{"location":"cppnow-2016/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"cppnow-2016/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"cppnow-2016/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc.","title":"Socket.io server"},{"location":"cppnow-2016/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"cppnow-2016/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"cppnow-2016/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"cppnow-2016/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"cppnow-2016/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 .","title":"Full setup"},{"location":"cppnow-2016/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"cppnow-2016/README.html#license","text":"MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"cppnow-2016/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"cppnow-2016/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"cppnow-2016/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"cppnow-2016/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"cppnow-2016/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"cppnow-2016/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"cppnow-2016/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"cppnow-2016/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"cppnow-2016/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"cppnow-2016/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2","title":"Markdown Demo"},{"location":"cppnow-2016/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"cppnow-2016/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"cppnow-2016/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"cppnow-2016/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"cppnow-2016/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"cppnow-2016/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"cppnow-2017/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere. More reading: Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com . Instructions Markup Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section Element Attributes Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuration At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); Slide Changed Event A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Slide number If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); Overview mode Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details: Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc. socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js)"},{"location":"cppnow-2017/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere.","title":"reveal.js"},{"location":"cppnow-2017/README.html#more-reading","text":"Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading:"},{"location":"cppnow-2017/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com .","title":"Online Editor"},{"location":"cppnow-2017/README.html#instructions","text":"","title":"Instructions"},{"location":"cppnow-2017/README.html#markup","text":"Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"cppnow-2017/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section","title":"Markdown"},{"location":"cppnow-2017/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section","title":"External Markdown"},{"location":"cppnow-2017/README.html#element-attributes","text":"Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"cppnow-2017/README.html#slide-attributes","text":"Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"cppnow-2017/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"cppnow-2017/README.html#presentation-size","text":"All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 });","title":"Presentation Size"},{"location":"cppnow-2017/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"cppnow-2017/README.html#ready-event","text":"A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } );","title":"Ready Event"},{"location":"cppnow-2017/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"cppnow-2017/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"cppnow-2017/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"cppnow-2017/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"cppnow-2017/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding();","title":"API"},{"location":"cppnow-2017/README.html#slide-changed-event","text":"A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"cppnow-2017/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"cppnow-2017/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"cppnow-2017/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Slide Backgrounds"},{"location":"cppnow-2017/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"cppnow-2017/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section","title":"Slide Transitions"},{"location":"cppnow-2017/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"cppnow-2017/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"cppnow-2017/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"cppnow-2017/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code syntax highlighting"},{"location":"cppnow-2017/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' });","title":"Slide number"},{"location":"cppnow-2017/README.html#overview-mode","text":"Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"cppnow-2017/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"cppnow-2017/README.html#embedded-media","text":"Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded media"},{"location":"cppnow-2017/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"cppnow-2017/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"cppnow-2017/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project.","title":"PDF Export"},{"location":"cppnow-2017/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"cppnow-2017/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"cppnow-2017/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"cppnow-2017/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details:","title":"Multiplexing"},{"location":"cppnow-2017/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"cppnow-2017/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"cppnow-2017/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc.","title":"Socket.io server"},{"location":"cppnow-2017/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"cppnow-2017/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"cppnow-2017/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"cppnow-2017/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"cppnow-2017/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 .","title":"Full setup"},{"location":"cppnow-2017/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"cppnow-2017/README.html#license","text":"MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"cppnow-2017/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"cppnow-2017/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"cppnow-2017/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"cppnow-2017/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"cppnow-2017/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"cppnow-2017/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"cppnow-2017/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"cppnow-2017/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"cppnow-2017/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"cppnow-2017/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2","title":"Markdown Demo"},{"location":"cppnow-2017/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"cppnow-2017/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"cppnow-2017/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"cppnow-2017/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"cppnow-2017/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"cppnow-2017/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"cppnow-2019/reveal.js/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com . Table of contents Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Plugins Multiplexing Master presentation Client presentation Socket.io server MathJax License More reading Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com . Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) Instructions Markup Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section Element Attributes Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuring marked We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } }); Configuration At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS. Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Vertical Slide Navigation Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action: Navigation Mode You can finetune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presnetations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 - 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 - 2.3. Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section Lazy Loading Iframes Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . section iframe data-src= http://hakim.se data-preload /iframe /section You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible. API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element getRevealElement(); // div class= reveal ... /div Custom Key Bindings Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional) Slide Changed Event A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Color Backgrounds All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section Image Backgrounds By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section Video Backgrounds Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom . Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code Syntax Highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Line Numbers Highlights To enable line numbers, add data-line-numbers to your code tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted: pre code class= hljs data-line-numbers= 4,8-11 import React, { useState } from 'react'; function Example() { const [count, setCount] = useState(0); return ( div p You clicked {count} times /p button onClick={() = setCount(count + 1)} Click me /button /div ); } /code /pre Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function() { // Ignore numbering of vertical slides return [ Reveal.getIndices().h ]; }}); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' }); Overview mode Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Embedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched Resize Event When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } ); postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Separate pages for fragments Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false. Page size Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page. Print stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script Instructions Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" . Speaker notes clock and timers The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide section by setting the data-timing attribute. Both values are in numbers of seconds. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server Plugins Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ) . Registered plugin instances can optionally expose an \"init\" function that reveal.js will call to initialize them. When reveal.js is booted up via Reveal.initialize() , it will go through all registered plugins and invoke their \"init\" methods. If the \"init\" method returns a Promise, reveal.js will wait for that promise to be fullfilled before finshing the startup sequence and firing the ready event. Here's an example of a plugin that does some asynchronous work before reveal.js can proceed: let MyPlugin = { init: () = new Promise( resolve = setTimeout( resolve, 3000 ) ) }; Reveal.registerPlugin( 'myPlugin', MyPlugin ); Reveal.addEventListener( 'ready', () = console.log( 'Three seconds later...' ) ); Reveal.initialize(); If the init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence. Retrieving Plugins If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ) . If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ) . Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex . socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: macros } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. MathJax in Markdown If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$` License MIT licensed Copyright (C) 2019 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js) <a href=\"https://slides.com?ref=github\"><img src=\"https://s3.amazonaws.com/static.slid.es/images/slides-github-banner-320x40.png?1\" alt=\"Slides\" width=\"160\" height=\"20\"></a>"},{"location":"cppnow-2019/reveal.js/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com .","title":"reveal.js  "},{"location":"cppnow-2019/reveal.js/README.html#table-of-contents","text":"Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Plugins Multiplexing Master presentation Client presentation Socket.io server MathJax License","title":"Table of contents"},{"location":"cppnow-2019/reveal.js/README.html#more-reading","text":"Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading"},{"location":"cppnow-2019/reveal.js/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com .","title":"Online Editor"},{"location":"cppnow-2019/reveal.js/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"cppnow-2019/reveal.js/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"cppnow-2019/reveal.js/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 .","title":"Full setup"},{"location":"cppnow-2019/reveal.js/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"cppnow-2019/reveal.js/README.html#instructions","text":"","title":"Instructions"},{"location":"cppnow-2019/reveal.js/README.html#markup","text":"Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"cppnow-2019/reveal.js/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section","title":"Markdown"},{"location":"cppnow-2019/reveal.js/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section","title":"External Markdown"},{"location":"cppnow-2019/reveal.js/README.html#element-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"cppnow-2019/reveal.js/README.html#slide-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"cppnow-2019/reveal.js/README.html#configuring-marked","text":"We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } });","title":"Configuring marked"},{"location":"cppnow-2019/reveal.js/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"cppnow-2019/reveal.js/README.html#presentation-size","text":"All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 });","title":"Presentation Size"},{"location":"cppnow-2019/reveal.js/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"cppnow-2019/reveal.js/README.html#ready-event","text":"A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.","title":"Ready Event"},{"location":"cppnow-2019/reveal.js/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"cppnow-2019/reveal.js/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"cppnow-2019/reveal.js/README.html#vertical-slide-navigation","text":"Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action:","title":"Vertical Slide Navigation"},{"location":"cppnow-2019/reveal.js/README.html#navigation-mode","text":"You can finetune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presnetations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 - 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 - 2.3.","title":"Navigation Mode"},{"location":"cppnow-2019/reveal.js/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"cppnow-2019/reveal.js/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"cppnow-2019/reveal.js/README.html#lazy-loading-iframes","text":"Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . section iframe data-src= http://hakim.se data-preload /iframe /section You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible.","title":"Lazy Loading Iframes"},{"location":"cppnow-2019/reveal.js/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element getRevealElement(); // div class= reveal ... /div","title":"API"},{"location":"cppnow-2019/reveal.js/README.html#custom-key-bindings","text":"Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional)","title":"Custom Key Bindings"},{"location":"cppnow-2019/reveal.js/README.html#slide-changed-event","text":"A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"cppnow-2019/reveal.js/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"cppnow-2019/reveal.js/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"cppnow-2019/reveal.js/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe.","title":"Slide Backgrounds"},{"location":"cppnow-2019/reveal.js/README.html#color-backgrounds","text":"All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section","title":"Color Backgrounds"},{"location":"cppnow-2019/reveal.js/README.html#image-backgrounds","text":"By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section","title":"Image Backgrounds"},{"location":"cppnow-2019/reveal.js/README.html#video-backgrounds","text":"Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section","title":"Video Backgrounds"},{"location":"cppnow-2019/reveal.js/README.html#iframe-backgrounds","text":"Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section","title":"Iframe Backgrounds"},{"location":"cppnow-2019/reveal.js/README.html#background-transitions","text":"Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Background Transitions"},{"location":"cppnow-2019/reveal.js/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"cppnow-2019/reveal.js/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom .","title":"Slide Transitions"},{"location":"cppnow-2019/reveal.js/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"cppnow-2019/reveal.js/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"cppnow-2019/reveal.js/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"cppnow-2019/reveal.js/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code Syntax Highlighting"},{"location":"cppnow-2019/reveal.js/README.html#line-numbers-highlights","text":"To enable line numbers, add data-line-numbers to your code tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted: pre code class= hljs data-line-numbers= 4,8-11 import React, { useState } from 'react'; function Example() { const [count, setCount] = useState(0); return ( div p You clicked {count} times /p button onClick={() = setCount(count + 1)} Click me /button /div ); } /code /pre","title":"Line Numbers &amp; Highlights"},{"location":"cppnow-2019/reveal.js/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function() { // Ignore numbering of vertical slides return [ Reveal.getIndices().h ]; }}); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' });","title":"Slide number"},{"location":"cppnow-2019/reveal.js/README.html#overview-mode","text":"Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"cppnow-2019/reveal.js/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"cppnow-2019/reveal.js/README.html#embedded-media","text":"Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.","title":"Embedded media"},{"location":"cppnow-2019/reveal.js/README.html#embedded-iframes","text":"reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded iframes"},{"location":"cppnow-2019/reveal.js/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"cppnow-2019/reveal.js/README.html#resize-event","text":"When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } );","title":"Resize Event"},{"location":"cppnow-2019/reveal.js/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"cppnow-2019/reveal.js/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.","title":"PDF Export"},{"location":"cppnow-2019/reveal.js/README.html#separate-pages-for-fragments","text":"Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false.","title":"Separate pages for fragments"},{"location":"cppnow-2019/reveal.js/README.html#page-size","text":"Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.","title":"Page size"},{"location":"cppnow-2019/reveal.js/README.html#print-stylesheet","text":"To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script","title":"Print stylesheet"},{"location":"cppnow-2019/reveal.js/README.html#instructions_1","text":"Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project.","title":"Instructions"},{"location":"cppnow-2019/reveal.js/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"cppnow-2019/reveal.js/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"cppnow-2019/reveal.js/README.html#share-and-print-speaker-notes","text":"Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" .","title":"Share and Print Speaker Notes"},{"location":"cppnow-2019/reveal.js/README.html#speaker-notes-clock-and-timers","text":"The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide section by setting the data-timing attribute. Both values are in numbers of seconds.","title":"Speaker notes clock and timers"},{"location":"cppnow-2019/reveal.js/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"cppnow-2019/reveal.js/README.html#plugins","text":"Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ) . Registered plugin instances can optionally expose an \"init\" function that reveal.js will call to initialize them. When reveal.js is booted up via Reveal.initialize() , it will go through all registered plugins and invoke their \"init\" methods. If the \"init\" method returns a Promise, reveal.js will wait for that promise to be fullfilled before finshing the startup sequence and firing the ready event. Here's an example of a plugin that does some asynchronous work before reveal.js can proceed: let MyPlugin = { init: () = new Promise( resolve = setTimeout( resolve, 3000 ) ) }; Reveal.registerPlugin( 'myPlugin', MyPlugin ); Reveal.addEventListener( 'ready', () = console.log( 'Three seconds later...' ) ); Reveal.initialize(); If the init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence.","title":"Plugins"},{"location":"cppnow-2019/reveal.js/README.html#retrieving-plugins","text":"If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ) . If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ) .","title":"Retrieving Plugins"},{"location":"cppnow-2019/reveal.js/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients","title":"Multiplexing"},{"location":"cppnow-2019/reveal.js/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"cppnow-2019/reveal.js/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"cppnow-2019/reveal.js/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex .","title":"Socket.io server"},{"location":"cppnow-2019/reveal.js/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"cppnow-2019/reveal.js/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: macros } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"cppnow-2019/reveal.js/README.html#mathjax-in-markdown","text":"If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$`","title":"MathJax in Markdown"},{"location":"cppnow-2019/reveal.js/README.html#license","text":"MIT licensed Copyright (C) 2019 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"cppnow-2019/reveal.js/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"cppnow-2019/reveal.js/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"cppnow-2019/reveal.js/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"cppnow-2019/reveal.js/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"cppnow-2019/reveal.js/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"cppnow-2019/reveal.js/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"cppnow-2019/reveal.js/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"cppnow-2019/reveal.js/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"cppnow-2019/reveal.js/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#external-33","text":"","title":"External 3.3"},{"location":"cppnow-2019/reveal.js/test/simple.html","text":"Slide 1.1 var a = 1; Slide 1.2 Slide 2","title":"Simple"},{"location":"cppnow-2019/reveal.js/test/simple.html#slide-11","text":"var a = 1;","title":"Slide 1.1"},{"location":"cppnow-2019/reveal.js/test/simple.html#slide-12","text":"","title":"Slide 1.2"},{"location":"cppnow-2019/reveal.js/test/simple.html#slide-2","text":"","title":"Slide 2"},{"location":"cppsummit-2022/reveal.js/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown support , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com . Supporting reveal.js This project was started and is maintained by @hakimel with the help of many contributions from the community . The best way to support the project is to become a paying member of Slides.com \u2014the reveal.js presentation platform that Hakim is building. Table of contents Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Custom Key Bindings Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Plugins Multiplexing Master presentation Client presentation Socket.io server MathJax License More reading Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com . Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (9.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) Instructions Markup Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section Element Attributes Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuring marked We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } }); Configuration At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Specify the total time in seconds that is available to // present. If this is set to a nonzero value, the pacing // timer will work out the time available for each slide, // instead of using the defaultTiming value totalTime: 0, // Specify the minimum amount of time you want to allot to // each slide, if using the totalTime calculation method. If // the automated time allocation causes slide pacing to fall // below this threshold, then you will see an alert in the // speaker notes window minimumTimePerSlide: 0; // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Number of slides away from the current that are visible on mobile // devices. It is advisable to set this to a lower number than // viewDistance in order to save resources. mobileViewDistance: 2, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS. Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Vertical Slide Navigation Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action: Navigation Mode You can fine tune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presentations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 - 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 - 2.3. Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section Lazy Loading Iframes Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . section iframe data-src= http://hakim.se data-preload /iframe /section You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible. API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns an array with all horizontal/vertical slides in the deck Reveal.getHorizontalSlides(); Reveal.getVerticalSlides(); // Checks if the presentation contains two or more // horizontal/vertical slides Reveal.hasHorizontalSlides(); Reveal.hasVerticalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element Reveal.getRevealElement(); // div class= reveal ... /div Custom Key Bindings Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional) Slide Changed Event A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Color Backgrounds All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section Image Backgrounds By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section Video Backgrounds Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Iframes are lazy-loaded when they become visible. If you'd like to preload iframes ahead of time, you can append a data-preload attribute to the slide section . You can also enable preloading globally for all iframes using the preloadIframes configuration option. Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom . Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code Syntax Highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Line Numbers Highlights To enable line numbers, add data-line-numbers to your code tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted: pre code class= hljs data-line-numbers= 4,8-11 import React, { useState } from 'react'; function Example() { const [count, setCount] = useState(0); return ( div p You clicked {count} times /p button onClick={() = setCount(count + 1)} Click me /button /div ); } /code /pre Step-by-step Highlights You can step through multiple code highlights on the same code block. Delimit each of your highlight steps with the | character. For example data-line-numbers=\"1|2-3|4,6-10\" will produce three steps. It will start by highlighting line 1, next step is lines 2-3, and finally line 4 and 6 through 10. Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function( slide ) { // Ignore numbering of vertical slides return [ Reveal.getIndices( slide ).h ]; }}); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' }); Overview mode Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Embedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched Resize Event When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } ); postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); postMessage Events When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName === 'slidechanged' ) { // Slide changed, see data.state for slide number } } ); postMessage Callbacks When you call any method via the postMessage API, reveal.js will dispatch a message with the return value. This is done so that you can call a getter method and see what the result is. Check out this example: revealWindow .postMessage( JSON.stringify({ method: 'getTotalSlides' }), '*' ); window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); // `data.method`` is the method that we invoked if( data.namespace === 'reveal' data.eventName === 'callback' data.method === 'getTotalSlides' ) { data.result // = the total number of slides } } ); Turning postMessage on/off This cross-window messaging can be toggled on or off using configuration flags. These are the default values. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Separate pages for fragments Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false. Page size Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page. Print stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script Instructions Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" . Speaker notes clock and timers The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Alternatively, you can enable the timer by setting totalTime , which sets the total length of your presentation (also in seconds). If both values are specified, totalTime wins and defaultTiming is ignored. Regardless of the baseline timing method, timings can also be given per slide section by setting the data-timing attribute (again, in seconds). Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (9.0.0 or later) Run npm install Run node plugin/notes-server Plugins Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ) . Registered plugin instances can optionally expose an \"init\" function that reveal.js will call to initialize them. When reveal.js is booted up via Reveal.initialize() , it will go through all registered plugins and invoke their \"init\" methods. If the \"init\" method returns a Promise, reveal.js will wait for that promise to be fulfilled before finishing the startup sequence and firing the ready event. Here's an example of a plugin that does some asynchronous work before reveal.js can proceed: let MyPlugin = { init: () = new Promise( resolve = setTimeout( resolve, 3000 ) ) }; Reveal.registerPlugin( 'myPlugin', MyPlugin ); Reveal.addEventListener( 'ready', () = console.log( 'Three seconds later...' ) ); Reveal.initialize(); Note that reveal.js will not wait for init Promise fulfillment if the plugin is loaded as an async dependency . If the plugin's init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence. Retrieving Plugins If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ) . If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ) . Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via https://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit https://example.com/token , where https://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex . socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full', // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: { RR: {\\\\bf R} } } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. MathJax in Markdown If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$` License MIT licensed Copyright (C) 2020 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js) <a href=\"https://slides.com?ref=github\"><img src=\"https://s3.amazonaws.com/static.slid.es/images/slides-github-banner-320x40.png?1\" alt=\"Slides\" width=\"160\" height=\"20\"></a>"},{"location":"cppsummit-2022/reveal.js/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown support , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com .","title":"reveal.js  "},{"location":"cppsummit-2022/reveal.js/README.html#supporting-revealjs","text":"This project was started and is maintained by @hakimel with the help of many contributions from the community . The best way to support the project is to become a paying member of Slides.com \u2014the reveal.js presentation platform that Hakim is building.","title":"Supporting reveal.js"},{"location":"cppsummit-2022/reveal.js/README.html#table-of-contents","text":"Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Custom Key Bindings Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Plugins Multiplexing Master presentation Client presentation Socket.io server MathJax License","title":"Table of contents"},{"location":"cppsummit-2022/reveal.js/README.html#more-reading","text":"Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading"},{"location":"cppsummit-2022/reveal.js/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com .","title":"Online Editor"},{"location":"cppsummit-2022/reveal.js/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"cppsummit-2022/reveal.js/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"cppsummit-2022/reveal.js/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (9.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 .","title":"Full setup"},{"location":"cppsummit-2022/reveal.js/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"cppsummit-2022/reveal.js/README.html#instructions","text":"","title":"Instructions"},{"location":"cppsummit-2022/reveal.js/README.html#markup","text":"Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"cppsummit-2022/reveal.js/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section","title":"Markdown"},{"location":"cppsummit-2022/reveal.js/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section","title":"External Markdown"},{"location":"cppsummit-2022/reveal.js/README.html#element-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"cppsummit-2022/reveal.js/README.html#slide-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"cppsummit-2022/reveal.js/README.html#configuring-marked","text":"We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } });","title":"Configuring marked"},{"location":"cppsummit-2022/reveal.js/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Specify the total time in seconds that is available to // present. If this is set to a nonzero value, the pacing // timer will work out the time available for each slide, // instead of using the defaultTiming value totalTime: 0, // Specify the minimum amount of time you want to allot to // each slide, if using the totalTime calculation method. If // the automated time allocation causes slide pacing to fall // below this threshold, then you will see an alert in the // speaker notes window minimumTimePerSlide: 0; // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Number of slides away from the current that are visible on mobile // devices. It is advisable to set this to a lower number than // viewDistance in order to save resources. mobileViewDistance: 2, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"cppsummit-2022/reveal.js/README.html#presentation-size","text":"All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 });","title":"Presentation Size"},{"location":"cppsummit-2022/reveal.js/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"cppsummit-2022/reveal.js/README.html#ready-event","text":"A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.","title":"Ready Event"},{"location":"cppsummit-2022/reveal.js/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"cppsummit-2022/reveal.js/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"cppsummit-2022/reveal.js/README.html#vertical-slide-navigation","text":"Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action:","title":"Vertical Slide Navigation"},{"location":"cppsummit-2022/reveal.js/README.html#navigation-mode","text":"You can fine tune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presentations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 - 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 - 2.3.","title":"Navigation Mode"},{"location":"cppsummit-2022/reveal.js/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"cppsummit-2022/reveal.js/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"cppsummit-2022/reveal.js/README.html#lazy-loading-iframes","text":"Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . section iframe data-src= http://hakim.se data-preload /iframe /section You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible.","title":"Lazy Loading Iframes"},{"location":"cppsummit-2022/reveal.js/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns an array with all horizontal/vertical slides in the deck Reveal.getHorizontalSlides(); Reveal.getVerticalSlides(); // Checks if the presentation contains two or more // horizontal/vertical slides Reveal.hasHorizontalSlides(); Reveal.hasVerticalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element Reveal.getRevealElement(); // div class= reveal ... /div","title":"API"},{"location":"cppsummit-2022/reveal.js/README.html#custom-key-bindings","text":"Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional)","title":"Custom Key Bindings"},{"location":"cppsummit-2022/reveal.js/README.html#slide-changed-event","text":"A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"cppsummit-2022/reveal.js/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"cppsummit-2022/reveal.js/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"cppsummit-2022/reveal.js/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe.","title":"Slide Backgrounds"},{"location":"cppsummit-2022/reveal.js/README.html#color-backgrounds","text":"All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section","title":"Color Backgrounds"},{"location":"cppsummit-2022/reveal.js/README.html#image-backgrounds","text":"By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section","title":"Image Backgrounds"},{"location":"cppsummit-2022/reveal.js/README.html#video-backgrounds","text":"Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section","title":"Video Backgrounds"},{"location":"cppsummit-2022/reveal.js/README.html#iframe-backgrounds","text":"Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Iframes are lazy-loaded when they become visible. If you'd like to preload iframes ahead of time, you can append a data-preload attribute to the slide section . You can also enable preloading globally for all iframes using the preloadIframes configuration option.","title":"Iframe Backgrounds"},{"location":"cppsummit-2022/reveal.js/README.html#background-transitions","text":"Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Background Transitions"},{"location":"cppsummit-2022/reveal.js/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"cppsummit-2022/reveal.js/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom .","title":"Slide Transitions"},{"location":"cppsummit-2022/reveal.js/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"cppsummit-2022/reveal.js/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"cppsummit-2022/reveal.js/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"cppsummit-2022/reveal.js/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code Syntax Highlighting"},{"location":"cppsummit-2022/reveal.js/README.html#line-numbers-highlights","text":"To enable line numbers, add data-line-numbers to your code tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted: pre code class= hljs data-line-numbers= 4,8-11 import React, { useState } from 'react'; function Example() { const [count, setCount] = useState(0); return ( div p You clicked {count} times /p button onClick={() = setCount(count + 1)} Click me /button /div ); } /code /pre","title":"Line Numbers &amp; Highlights"},{"location":"cppsummit-2022/reveal.js/README.html#step-by-step-highlights","text":"You can step through multiple code highlights on the same code block. Delimit each of your highlight steps with the | character. For example data-line-numbers=\"1|2-3|4,6-10\" will produce three steps. It will start by highlighting line 1, next step is lines 2-3, and finally line 4 and 6 through 10.","title":"Step-by-step Highlights"},{"location":"cppsummit-2022/reveal.js/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function( slide ) { // Ignore numbering of vertical slides return [ Reveal.getIndices( slide ).h ]; }}); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' });","title":"Slide number"},{"location":"cppsummit-2022/reveal.js/README.html#overview-mode","text":"Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"cppsummit-2022/reveal.js/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"cppsummit-2022/reveal.js/README.html#embedded-media","text":"Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.","title":"Embedded media"},{"location":"cppsummit-2022/reveal.js/README.html#embedded-iframes","text":"reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded iframes"},{"location":"cppsummit-2022/reveal.js/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"cppsummit-2022/reveal.js/README.html#resize-event","text":"When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } );","title":"Resize Event"},{"location":"cppsummit-2022/reveal.js/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' );","title":"postMessage API"},{"location":"cppsummit-2022/reveal.js/README.html#postmessage-events","text":"When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName === 'slidechanged' ) { // Slide changed, see data.state for slide number } } );","title":"postMessage Events"},{"location":"cppsummit-2022/reveal.js/README.html#postmessage-callbacks","text":"When you call any method via the postMessage API, reveal.js will dispatch a message with the return value. This is done so that you can call a getter method and see what the result is. Check out this example: revealWindow .postMessage( JSON.stringify({ method: 'getTotalSlides' }), '*' ); window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); // `data.method`` is the method that we invoked if( data.namespace === 'reveal' data.eventName === 'callback' data.method === 'getTotalSlides' ) { data.result // = the total number of slides } } );","title":"postMessage Callbacks"},{"location":"cppsummit-2022/reveal.js/README.html#turning-postmessage-onoff","text":"This cross-window messaging can be toggled on or off using configuration flags. These are the default values. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"Turning postMessage on/off"},{"location":"cppsummit-2022/reveal.js/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.","title":"PDF Export"},{"location":"cppsummit-2022/reveal.js/README.html#separate-pages-for-fragments","text":"Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false.","title":"Separate pages for fragments"},{"location":"cppsummit-2022/reveal.js/README.html#page-size","text":"Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.","title":"Page size"},{"location":"cppsummit-2022/reveal.js/README.html#print-stylesheet","text":"To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script","title":"Print stylesheet"},{"location":"cppsummit-2022/reveal.js/README.html#instructions_1","text":"Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project.","title":"Instructions"},{"location":"cppsummit-2022/reveal.js/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"cppsummit-2022/reveal.js/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"cppsummit-2022/reveal.js/README.html#share-and-print-speaker-notes","text":"Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" .","title":"Share and Print Speaker Notes"},{"location":"cppsummit-2022/reveal.js/README.html#speaker-notes-clock-and-timers","text":"The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Alternatively, you can enable the timer by setting totalTime , which sets the total length of your presentation (also in seconds). If both values are specified, totalTime wins and defaultTiming is ignored. Regardless of the baseline timing method, timings can also be given per slide section by setting the data-timing attribute (again, in seconds).","title":"Speaker notes clock and timers"},{"location":"cppsummit-2022/reveal.js/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (9.0.0 or later) Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"cppsummit-2022/reveal.js/README.html#plugins","text":"Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ) . Registered plugin instances can optionally expose an \"init\" function that reveal.js will call to initialize them. When reveal.js is booted up via Reveal.initialize() , it will go through all registered plugins and invoke their \"init\" methods. If the \"init\" method returns a Promise, reveal.js will wait for that promise to be fulfilled before finishing the startup sequence and firing the ready event. Here's an example of a plugin that does some asynchronous work before reveal.js can proceed: let MyPlugin = { init: () = new Promise( resolve = setTimeout( resolve, 3000 ) ) }; Reveal.registerPlugin( 'myPlugin', MyPlugin ); Reveal.addEventListener( 'ready', () = console.log( 'Three seconds later...' ) ); Reveal.initialize(); Note that reveal.js will not wait for init Promise fulfillment if the plugin is loaded as an async dependency . If the plugin's init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence.","title":"Plugins"},{"location":"cppsummit-2022/reveal.js/README.html#retrieving-plugins","text":"If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ) . If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ) .","title":"Retrieving Plugins"},{"location":"cppsummit-2022/reveal.js/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients","title":"Multiplexing"},{"location":"cppsummit-2022/reveal.js/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"cppsummit-2022/reveal.js/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via https://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"cppsummit-2022/reveal.js/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit https://example.com/token , where https://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex .","title":"Socket.io server"},{"location":"cppsummit-2022/reveal.js/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"cppsummit-2022/reveal.js/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full', // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: { RR: {\\\\bf R} } } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"cppsummit-2022/reveal.js/README.html#mathjax-in-markdown","text":"If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$`","title":"MathJax in Markdown"},{"location":"cppsummit-2022/reveal.js/README.html#license","text":"MIT licensed Copyright (C) 2020 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"cppsummit-2022/reveal.js/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"cppsummit-2022/reveal.js/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"cppsummit-2022/reveal.js/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"cppsummit-2022/reveal.js/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"cppsummit-2022/reveal.js/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"cppsummit-2022/reveal.js/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"cppsummit-2022/reveal.js/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"cppsummit-2022/reveal.js/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"cppsummit-2022/reveal.js/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"cppsummit-2022/reveal.js/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"cppsummit-2022/reveal.js/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"cppsummit-2022/reveal.js/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"cppsummit-2022/reveal.js/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"cppsummit-2022/reveal.js/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"cppsummit-2022/reveal.js/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"cppsummit-2022/reveal.js/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"cppsummit-2022/reveal.js/plugin/markdown/example.html#external-33","text":"","title":"External 3.3"},{"location":"cppsummit-2022/reveal.js/test/simple.html","text":"Slide 1.1 var a = 1; Slide 1.2 Slide 2","title":"Simple"},{"location":"cppsummit-2022/reveal.js/test/simple.html#slide-11","text":"var a = 1;","title":"Slide 1.1"},{"location":"cppsummit-2022/reveal.js/test/simple.html#slide-12","text":"","title":"Slide 1.2"},{"location":"cppsummit-2022/reveal.js/test/simple.html#slide-2","text":"","title":"Slide 2"},{"location":"denver-cpp-2020/reveal.js/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown support , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com . Supporting reveal.js This project was started and is maintained by @hakimel with the help of many contributions from the community . The best way to support the project is to become a paying member of Slides.com \u2014the reveal.js presentation platform that Hakim is building. Table of contents Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Custom Key Bindings Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Plugins Multiplexing Master presentation Client presentation Socket.io server MathJax License More reading Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com . Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (9.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) Instructions Markup Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section Element Attributes Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuring marked We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } }); Configuration At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Specify the total time in seconds that is available to // present. If this is set to a nonzero value, the pacing // timer will work out the time available for each slide, // instead of using the defaultTiming value totalTime: 0, // Specify the minimum amount of time you want to allot to // each slide, if using the totalTime calculation method. If // the automated time allocation causes slide pacing to fall // below this threshold, then you will see an alert in the // speaker notes window minimumTimePerSlide: 0; // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Number of slides away from the current that are visible on mobile // devices. It is advisable to set this to a lower number than // viewDistance in order to save resources. mobileViewDistance: 2, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS. Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Vertical Slide Navigation Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action: Navigation Mode You can fine tune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presentations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 - 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 - 2.3. Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section Lazy Loading Iframes Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . section iframe data-src= http://hakim.se data-preload /iframe /section You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible. API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns an array with all horizontal/vertical slides in the deck Reveal.getHorizontalSlides(); Reveal.getVerticalSlides(); // Checks if the presentation contains two or more // horizontal/vertical slides Reveal.hasHorizontalSlides(); Reveal.hasVerticalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element Reveal.getRevealElement(); // div class= reveal ... /div Custom Key Bindings Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional) Slide Changed Event A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Color Backgrounds All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section Image Backgrounds By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section Video Backgrounds Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Iframes are lazy-loaded when they become visible. If you'd like to preload iframes ahead of time, you can append a data-preload attribute to the slide section . You can also enable preloading globally for all iframes using the preloadIframes configuration option. Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom . Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code Syntax Highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Line Numbers Highlights To enable line numbers, add data-line-numbers to your code tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted: pre code class= hljs data-line-numbers= 4,8-11 import React, { useState } from 'react'; function Example() { const [count, setCount] = useState(0); return ( div p You clicked {count} times /p button onClick={() = setCount(count + 1)} Click me /button /div ); } /code /pre Step-by-step Highlights You can step through multiple code highlights on the same code block. Delimit each of your highlight steps with the | character. For example data-line-numbers=\"1|2-3|4,6-10\" will produce three steps. It will start by highlighting line 1, next step is lines 2-3, and finally line 4 and 6 through 10. Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function( slide ) { // Ignore numbering of vertical slides return [ Reveal.getIndices( slide ).h ]; }}); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' }); Overview mode Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Embedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched Resize Event When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } ); postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); postMessage Events When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName === 'slidechanged' ) { // Slide changed, see data.state for slide number } } ); postMessage Callbacks When you call any method via the postMessage API, reveal.js will dispatch a message with the return value. This is done so that you can call a getter method and see what the result is. Check out this example: revealWindow .postMessage( JSON.stringify({ method: 'getTotalSlides' }), '*' ); window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); // `data.method`` is the method that we invoked if( data.namespace === 'reveal' data.eventName === 'callback' data.method === 'getTotalSlides' ) { data.result // = the total number of slides } } ); Turning postMessage on/off This cross-window messaging can be toggled on or off using configuration flags. These are the default values. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Separate pages for fragments Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false. Page size Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page. Print stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script Instructions Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" . Speaker notes clock and timers The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Alternatively, you can enable the timer by setting totalTime , which sets the total length of your presentation (also in seconds). If both values are specified, totalTime wins and defaultTiming is ignored. Regardless of the baseline timing method, timings can also be given per slide section by setting the data-timing attribute (again, in seconds). Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (9.0.0 or later) Run npm install Run node plugin/notes-server Plugins Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ) . Registered plugin instances can optionally expose an \"init\" function that reveal.js will call to initialize them. When reveal.js is booted up via Reveal.initialize() , it will go through all registered plugins and invoke their \"init\" methods. If the \"init\" method returns a Promise, reveal.js will wait for that promise to be fulfilled before finishing the startup sequence and firing the ready event. Here's an example of a plugin that does some asynchronous work before reveal.js can proceed: let MyPlugin = { init: () = new Promise( resolve = setTimeout( resolve, 3000 ) ) }; Reveal.registerPlugin( 'myPlugin', MyPlugin ); Reveal.addEventListener( 'ready', () = console.log( 'Three seconds later...' ) ); Reveal.initialize(); Note that reveal.js will not wait for init Promise fulfillment if the plugin is loaded as an async dependency . If the plugin's init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence. Retrieving Plugins If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ) . If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ) . Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via https://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit https://example.com/token , where https://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex . socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full', // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: { RR: {\\\\bf R} } } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. MathJax in Markdown If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$` License MIT licensed Copyright (C) 2020 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js) <a href=\"https://slides.com?ref=github\"><img src=\"https://s3.amazonaws.com/static.slid.es/images/slides-github-banner-320x40.png?1\" alt=\"Slides\" width=\"160\" height=\"20\"></a>"},{"location":"denver-cpp-2020/reveal.js/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown support , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com .","title":"reveal.js  "},{"location":"denver-cpp-2020/reveal.js/README.html#supporting-revealjs","text":"This project was started and is maintained by @hakimel with the help of many contributions from the community . The best way to support the project is to become a paying member of Slides.com \u2014the reveal.js presentation platform that Hakim is building.","title":"Supporting reveal.js"},{"location":"denver-cpp-2020/reveal.js/README.html#table-of-contents","text":"Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Custom Key Bindings Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Plugins Multiplexing Master presentation Client presentation Socket.io server MathJax License","title":"Table of contents"},{"location":"denver-cpp-2020/reveal.js/README.html#more-reading","text":"Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading"},{"location":"denver-cpp-2020/reveal.js/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com .","title":"Online Editor"},{"location":"denver-cpp-2020/reveal.js/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"denver-cpp-2020/reveal.js/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"denver-cpp-2020/reveal.js/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (9.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 .","title":"Full setup"},{"location":"denver-cpp-2020/reveal.js/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"denver-cpp-2020/reveal.js/README.html#instructions","text":"","title":"Instructions"},{"location":"denver-cpp-2020/reveal.js/README.html#markup","text":"Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"denver-cpp-2020/reveal.js/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section","title":"Markdown"},{"location":"denver-cpp-2020/reveal.js/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section","title":"External Markdown"},{"location":"denver-cpp-2020/reveal.js/README.html#element-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"denver-cpp-2020/reveal.js/README.html#slide-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"denver-cpp-2020/reveal.js/README.html#configuring-marked","text":"We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } });","title":"Configuring marked"},{"location":"denver-cpp-2020/reveal.js/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Specify the total time in seconds that is available to // present. If this is set to a nonzero value, the pacing // timer will work out the time available for each slide, // instead of using the defaultTiming value totalTime: 0, // Specify the minimum amount of time you want to allot to // each slide, if using the totalTime calculation method. If // the automated time allocation causes slide pacing to fall // below this threshold, then you will see an alert in the // speaker notes window minimumTimePerSlide: 0; // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Number of slides away from the current that are visible on mobile // devices. It is advisable to set this to a lower number than // viewDistance in order to save resources. mobileViewDistance: 2, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"denver-cpp-2020/reveal.js/README.html#presentation-size","text":"All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 });","title":"Presentation Size"},{"location":"denver-cpp-2020/reveal.js/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"denver-cpp-2020/reveal.js/README.html#ready-event","text":"A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.","title":"Ready Event"},{"location":"denver-cpp-2020/reveal.js/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"denver-cpp-2020/reveal.js/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"denver-cpp-2020/reveal.js/README.html#vertical-slide-navigation","text":"Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action:","title":"Vertical Slide Navigation"},{"location":"denver-cpp-2020/reveal.js/README.html#navigation-mode","text":"You can fine tune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presentations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 - 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 - 2.3.","title":"Navigation Mode"},{"location":"denver-cpp-2020/reveal.js/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"denver-cpp-2020/reveal.js/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"denver-cpp-2020/reveal.js/README.html#lazy-loading-iframes","text":"Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . section iframe data-src= http://hakim.se data-preload /iframe /section You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible.","title":"Lazy Loading Iframes"},{"location":"denver-cpp-2020/reveal.js/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns an array with all horizontal/vertical slides in the deck Reveal.getHorizontalSlides(); Reveal.getVerticalSlides(); // Checks if the presentation contains two or more // horizontal/vertical slides Reveal.hasHorizontalSlides(); Reveal.hasVerticalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element Reveal.getRevealElement(); // div class= reveal ... /div","title":"API"},{"location":"denver-cpp-2020/reveal.js/README.html#custom-key-bindings","text":"Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional)","title":"Custom Key Bindings"},{"location":"denver-cpp-2020/reveal.js/README.html#slide-changed-event","text":"A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"denver-cpp-2020/reveal.js/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"denver-cpp-2020/reveal.js/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"denver-cpp-2020/reveal.js/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe.","title":"Slide Backgrounds"},{"location":"denver-cpp-2020/reveal.js/README.html#color-backgrounds","text":"All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section","title":"Color Backgrounds"},{"location":"denver-cpp-2020/reveal.js/README.html#image-backgrounds","text":"By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section","title":"Image Backgrounds"},{"location":"denver-cpp-2020/reveal.js/README.html#video-backgrounds","text":"Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section","title":"Video Backgrounds"},{"location":"denver-cpp-2020/reveal.js/README.html#iframe-backgrounds","text":"Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Iframes are lazy-loaded when they become visible. If you'd like to preload iframes ahead of time, you can append a data-preload attribute to the slide section . You can also enable preloading globally for all iframes using the preloadIframes configuration option.","title":"Iframe Backgrounds"},{"location":"denver-cpp-2020/reveal.js/README.html#background-transitions","text":"Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Background Transitions"},{"location":"denver-cpp-2020/reveal.js/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"denver-cpp-2020/reveal.js/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom .","title":"Slide Transitions"},{"location":"denver-cpp-2020/reveal.js/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"denver-cpp-2020/reveal.js/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"denver-cpp-2020/reveal.js/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"denver-cpp-2020/reveal.js/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code Syntax Highlighting"},{"location":"denver-cpp-2020/reveal.js/README.html#line-numbers-highlights","text":"To enable line numbers, add data-line-numbers to your code tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted: pre code class= hljs data-line-numbers= 4,8-11 import React, { useState } from 'react'; function Example() { const [count, setCount] = useState(0); return ( div p You clicked {count} times /p button onClick={() = setCount(count + 1)} Click me /button /div ); } /code /pre","title":"Line Numbers &amp; Highlights"},{"location":"denver-cpp-2020/reveal.js/README.html#step-by-step-highlights","text":"You can step through multiple code highlights on the same code block. Delimit each of your highlight steps with the | character. For example data-line-numbers=\"1|2-3|4,6-10\" will produce three steps. It will start by highlighting line 1, next step is lines 2-3, and finally line 4 and 6 through 10.","title":"Step-by-step Highlights"},{"location":"denver-cpp-2020/reveal.js/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function( slide ) { // Ignore numbering of vertical slides return [ Reveal.getIndices( slide ).h ]; }}); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' });","title":"Slide number"},{"location":"denver-cpp-2020/reveal.js/README.html#overview-mode","text":"Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"denver-cpp-2020/reveal.js/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"denver-cpp-2020/reveal.js/README.html#embedded-media","text":"Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.","title":"Embedded media"},{"location":"denver-cpp-2020/reveal.js/README.html#embedded-iframes","text":"reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded iframes"},{"location":"denver-cpp-2020/reveal.js/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"denver-cpp-2020/reveal.js/README.html#resize-event","text":"When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } );","title":"Resize Event"},{"location":"denver-cpp-2020/reveal.js/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' );","title":"postMessage API"},{"location":"denver-cpp-2020/reveal.js/README.html#postmessage-events","text":"When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName === 'slidechanged' ) { // Slide changed, see data.state for slide number } } );","title":"postMessage Events"},{"location":"denver-cpp-2020/reveal.js/README.html#postmessage-callbacks","text":"When you call any method via the postMessage API, reveal.js will dispatch a message with the return value. This is done so that you can call a getter method and see what the result is. Check out this example: revealWindow .postMessage( JSON.stringify({ method: 'getTotalSlides' }), '*' ); window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); // `data.method`` is the method that we invoked if( data.namespace === 'reveal' data.eventName === 'callback' data.method === 'getTotalSlides' ) { data.result // = the total number of slides } } );","title":"postMessage Callbacks"},{"location":"denver-cpp-2020/reveal.js/README.html#turning-postmessage-onoff","text":"This cross-window messaging can be toggled on or off using configuration flags. These are the default values. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"Turning postMessage on/off"},{"location":"denver-cpp-2020/reveal.js/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.","title":"PDF Export"},{"location":"denver-cpp-2020/reveal.js/README.html#separate-pages-for-fragments","text":"Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false.","title":"Separate pages for fragments"},{"location":"denver-cpp-2020/reveal.js/README.html#page-size","text":"Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.","title":"Page size"},{"location":"denver-cpp-2020/reveal.js/README.html#print-stylesheet","text":"To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script","title":"Print stylesheet"},{"location":"denver-cpp-2020/reveal.js/README.html#instructions_1","text":"Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project.","title":"Instructions"},{"location":"denver-cpp-2020/reveal.js/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"denver-cpp-2020/reveal.js/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"denver-cpp-2020/reveal.js/README.html#share-and-print-speaker-notes","text":"Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" .","title":"Share and Print Speaker Notes"},{"location":"denver-cpp-2020/reveal.js/README.html#speaker-notes-clock-and-timers","text":"The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Alternatively, you can enable the timer by setting totalTime , which sets the total length of your presentation (also in seconds). If both values are specified, totalTime wins and defaultTiming is ignored. Regardless of the baseline timing method, timings can also be given per slide section by setting the data-timing attribute (again, in seconds).","title":"Speaker notes clock and timers"},{"location":"denver-cpp-2020/reveal.js/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (9.0.0 or later) Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"denver-cpp-2020/reveal.js/README.html#plugins","text":"Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ) . Registered plugin instances can optionally expose an \"init\" function that reveal.js will call to initialize them. When reveal.js is booted up via Reveal.initialize() , it will go through all registered plugins and invoke their \"init\" methods. If the \"init\" method returns a Promise, reveal.js will wait for that promise to be fulfilled before finishing the startup sequence and firing the ready event. Here's an example of a plugin that does some asynchronous work before reveal.js can proceed: let MyPlugin = { init: () = new Promise( resolve = setTimeout( resolve, 3000 ) ) }; Reveal.registerPlugin( 'myPlugin', MyPlugin ); Reveal.addEventListener( 'ready', () = console.log( 'Three seconds later...' ) ); Reveal.initialize(); Note that reveal.js will not wait for init Promise fulfillment if the plugin is loaded as an async dependency . If the plugin's init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence.","title":"Plugins"},{"location":"denver-cpp-2020/reveal.js/README.html#retrieving-plugins","text":"If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ) . If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ) .","title":"Retrieving Plugins"},{"location":"denver-cpp-2020/reveal.js/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients","title":"Multiplexing"},{"location":"denver-cpp-2020/reveal.js/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"denver-cpp-2020/reveal.js/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via https://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"denver-cpp-2020/reveal.js/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit https://example.com/token , where https://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex .","title":"Socket.io server"},{"location":"denver-cpp-2020/reveal.js/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"denver-cpp-2020/reveal.js/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full', // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: { RR: {\\\\bf R} } } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"denver-cpp-2020/reveal.js/README.html#mathjax-in-markdown","text":"If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$`","title":"MathJax in Markdown"},{"location":"denver-cpp-2020/reveal.js/README.html#license","text":"MIT licensed Copyright (C) 2020 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"denver-cpp-2020/reveal.js/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"denver-cpp-2020/reveal.js/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"denver-cpp-2020/reveal.js/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"denver-cpp-2020/reveal.js/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"denver-cpp-2020/reveal.js/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"denver-cpp-2020/reveal.js/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"denver-cpp-2020/reveal.js/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"denver-cpp-2020/reveal.js/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"denver-cpp-2020/reveal.js/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"denver-cpp-2020/reveal.js/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"denver-cpp-2020/reveal.js/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"denver-cpp-2020/reveal.js/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"denver-cpp-2020/reveal.js/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"denver-cpp-2020/reveal.js/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"denver-cpp-2020/reveal.js/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"denver-cpp-2020/reveal.js/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"denver-cpp-2020/reveal.js/plugin/markdown/example.html#external-33","text":"","title":"External 3.3"},{"location":"denver-cpp-2020/reveal.js/test/simple.html","text":"Slide 1.1 var a = 1; Slide 1.2 Slide 2","title":"Simple"},{"location":"denver-cpp-2020/reveal.js/test/simple.html#slide-11","text":"var a = 1;","title":"Slide 1.1"},{"location":"denver-cpp-2020/reveal.js/test/simple.html#slide-12","text":"","title":"Slide 1.2"},{"location":"denver-cpp-2020/reveal.js/test/simple.html#slide-2","text":"","title":"Slide 2"},{"location":"embo-2017/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere. More reading: Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com . Instructions Markup Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section Element Attributes Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuration At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); Slide Changed Event A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Slide number If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); Overview mode Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details: Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc. socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js)"},{"location":"embo-2017/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere.","title":"reveal.js"},{"location":"embo-2017/README.html#more-reading","text":"Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading:"},{"location":"embo-2017/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com .","title":"Online Editor"},{"location":"embo-2017/README.html#instructions","text":"","title":"Instructions"},{"location":"embo-2017/README.html#markup","text":"Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"embo-2017/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section","title":"Markdown"},{"location":"embo-2017/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section","title":"External Markdown"},{"location":"embo-2017/README.html#element-attributes","text":"Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"embo-2017/README.html#slide-attributes","text":"Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"embo-2017/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"embo-2017/README.html#presentation-size","text":"All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 });","title":"Presentation Size"},{"location":"embo-2017/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"embo-2017/README.html#ready-event","text":"A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } );","title":"Ready Event"},{"location":"embo-2017/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"embo-2017/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"embo-2017/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"embo-2017/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"embo-2017/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding();","title":"API"},{"location":"embo-2017/README.html#slide-changed-event","text":"A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"embo-2017/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"embo-2017/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"embo-2017/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Slide Backgrounds"},{"location":"embo-2017/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"embo-2017/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section","title":"Slide Transitions"},{"location":"embo-2017/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"embo-2017/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"embo-2017/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"embo-2017/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code syntax highlighting"},{"location":"embo-2017/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' });","title":"Slide number"},{"location":"embo-2017/README.html#overview-mode","text":"Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"embo-2017/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"embo-2017/README.html#embedded-media","text":"Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded media"},{"location":"embo-2017/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"embo-2017/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"embo-2017/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project.","title":"PDF Export"},{"location":"embo-2017/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"embo-2017/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"embo-2017/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"embo-2017/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details:","title":"Multiplexing"},{"location":"embo-2017/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"embo-2017/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"embo-2017/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc.","title":"Socket.io server"},{"location":"embo-2017/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"embo-2017/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"embo-2017/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"embo-2017/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"embo-2017/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 .","title":"Full setup"},{"location":"embo-2017/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"embo-2017/README.html#license","text":"MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"embo-2017/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"embo-2017/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"embo-2017/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"embo-2017/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"embo-2017/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"embo-2017/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"embo-2017/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"embo-2017/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"embo-2017/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"embo-2017/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2","title":"Markdown Demo"},{"location":"embo-2017/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"embo-2017/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"embo-2017/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"embo-2017/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"embo-2017/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"embo-2017/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"embo-2018/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com . Table of contents Online Editor Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax Installation Basic setup Full setup Folder Structure License More reading Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com . Instructions Markup Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to note: ). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section Element Attributes Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuring marked We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://github.com/chjj/marked#options-1 markdown: { smartypants: true } }); Configuration At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Set default timing of 2 minutes per slide defaultTiming: 120, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded To load these dependencies, reveal.js requires head.js (a script loading library) to be loaded before reveal.js. Ready Event A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS. Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getPastSlideCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); Slide Changed Event A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Color Backgrounds All CSS color formats are supported, like rgba() or hsl(). section data-background-color= #ff0000 h2 Color /h2 /section Image Backgrounds By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section Video Backgrounds Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the zenburn theme: lib/css/zenburn.css ). Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' }); Overview mode Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Embedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a webserver. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Page size Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page. Print stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script Instructions Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes config value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a semi-transparent box on top of the slide. If you'd rather print them on a separate page after the slide, set showNotes: \"separate-page\" . Speaker notes clock and timers The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide section by setting the data-timing attribute. Both values are in numbers of seconds. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details: Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex . socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2017 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js) <a href=\"https://slides.com?ref=github\"><img src=\"https://s3.amazonaws.com/static.slid.es/images/slides-github-banner-320x40.png?1\" alt=\"Slides\" width=\"160\" height=\"20\"></a>"},{"location":"embo-2018/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com .","title":"reveal.js  "},{"location":"embo-2018/README.html#table-of-contents","text":"Online Editor Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax Installation Basic setup Full setup Folder Structure License","title":"Table of contents"},{"location":"embo-2018/README.html#more-reading","text":"Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading"},{"location":"embo-2018/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com .","title":"Online Editor"},{"location":"embo-2018/README.html#instructions","text":"","title":"Instructions"},{"location":"embo-2018/README.html#markup","text":"Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"embo-2018/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section","title":"Markdown"},{"location":"embo-2018/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to note: ). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section","title":"External Markdown"},{"location":"embo-2018/README.html#element-attributes","text":"Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"embo-2018/README.html#slide-attributes","text":"Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"embo-2018/README.html#configuring-marked","text":"We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://github.com/chjj/marked#options-1 markdown: { smartypants: true } });","title":"Configuring marked"},{"location":"embo-2018/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Set default timing of 2 minutes per slide defaultTiming: 120, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"embo-2018/README.html#presentation-size","text":"All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 });","title":"Presentation Size"},{"location":"embo-2018/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded To load these dependencies, reveal.js requires head.js (a script loading library) to be loaded before reveal.js.","title":"Dependencies"},{"location":"embo-2018/README.html#ready-event","text":"A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.","title":"Ready Event"},{"location":"embo-2018/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"embo-2018/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"embo-2018/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"embo-2018/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"embo-2018/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getPastSlideCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding();","title":"API"},{"location":"embo-2018/README.html#slide-changed-event","text":"A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"embo-2018/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"embo-2018/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"embo-2018/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe.","title":"Slide Backgrounds"},{"location":"embo-2018/README.html#color-backgrounds","text":"All CSS color formats are supported, like rgba() or hsl(). section data-background-color= #ff0000 h2 Color /h2 /section","title":"Color Backgrounds"},{"location":"embo-2018/README.html#image-backgrounds","text":"By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section","title":"Image Backgrounds"},{"location":"embo-2018/README.html#video-backgrounds","text":"Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section","title":"Video Backgrounds"},{"location":"embo-2018/README.html#iframe-backgrounds","text":"Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section","title":"Iframe Backgrounds"},{"location":"embo-2018/README.html#background-transitions","text":"Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Background Transitions"},{"location":"embo-2018/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"embo-2018/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section","title":"Slide Transitions"},{"location":"embo-2018/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"embo-2018/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"embo-2018/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"embo-2018/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the zenburn theme: lib/css/zenburn.css ). Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code syntax highlighting"},{"location":"embo-2018/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' });","title":"Slide number"},{"location":"embo-2018/README.html#overview-mode","text":"Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"embo-2018/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"embo-2018/README.html#embedded-media","text":"Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.","title":"Embedded media"},{"location":"embo-2018/README.html#embedded-iframes","text":"reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded iframes"},{"location":"embo-2018/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"embo-2018/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"embo-2018/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a webserver. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.","title":"PDF Export"},{"location":"embo-2018/README.html#page-size","text":"Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.","title":"Page size"},{"location":"embo-2018/README.html#print-stylesheet","text":"To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script","title":"Print stylesheet"},{"location":"embo-2018/README.html#instructions_1","text":"Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project.","title":"Instructions"},{"location":"embo-2018/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"embo-2018/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"embo-2018/README.html#share-and-print-speaker-notes","text":"Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes config value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a semi-transparent box on top of the slide. If you'd rather print them on a separate page after the slide, set showNotes: \"separate-page\" .","title":"Share and Print Speaker Notes"},{"location":"embo-2018/README.html#speaker-notes-clock-and-timers","text":"The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide section by setting the data-timing attribute. Both values are in numbers of seconds.","title":"Speaker notes clock and timers"},{"location":"embo-2018/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"embo-2018/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details:","title":"Multiplexing"},{"location":"embo-2018/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"embo-2018/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"embo-2018/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex .","title":"Socket.io server"},{"location":"embo-2018/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"embo-2018/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"embo-2018/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"embo-2018/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"embo-2018/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 .","title":"Full setup"},{"location":"embo-2018/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"embo-2018/README.html#license","text":"MIT licensed Copyright (C) 2017 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"embo-2018/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"embo-2018/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"embo-2018/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"embo-2018/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"embo-2018/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"embo-2018/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"embo-2018/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"embo-2018/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"embo-2018/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"embo-2018/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"embo-2018/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"embo-2018/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"embo-2018/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"embo-2018/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"embo-2018/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"embo-2018/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"embo-2018/plugin/markdown/example.html#external-33","text":"","title":"External 3.3"},{"location":"embo-2018/test/simple.html","text":"Slide 1.1 var a = 1; Slide 1.2 Slide 2","title":"Simple"},{"location":"embo-2018/test/simple.html#slide-11","text":"var a = 1;","title":"Slide 1.1"},{"location":"embo-2018/test/simple.html#slide-12","text":"","title":"Slide 1.2"},{"location":"embo-2018/test/simple.html#slide-2","text":"","title":"Slide 2"},{"location":"meeting-embedded-2020/reveal.js/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown support , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com . Supporting reveal.js This project was started and is maintained by @hakimel with the help of many contributions from the community . The best way to support the project is to become a paying member of Slides.com \u2014the reveal.js presentation platform that Hakim is building. Table of contents Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Custom Key Bindings Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Plugins Multiplexing Master presentation Client presentation Socket.io server MathJax License More reading Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com . Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (9.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) Instructions Markup Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section Element Attributes Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuring marked We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } }); Configuration At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Specify the total time in seconds that is available to // present. If this is set to a nonzero value, the pacing // timer will work out the time available for each slide, // instead of using the defaultTiming value totalTime: 0, // Specify the minimum amount of time you want to allot to // each slide, if using the totalTime calculation method. If // the automated time allocation causes slide pacing to fall // below this threshold, then you will see an alert in the // speaker notes window minimumTimePerSlide: 0; // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Number of slides away from the current that are visible on mobile // devices. It is advisable to set this to a lower number than // viewDistance in order to save resources. mobileViewDistance: 2, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS. Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Vertical Slide Navigation Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action: Navigation Mode You can fine tune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presentations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 - 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 - 2.3. Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section Lazy Loading Iframes Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . section iframe data-src= http://hakim.se data-preload /iframe /section You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible. API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns an array with all horizontal/vertical slides in the deck Reveal.getHorizontalSlides(); Reveal.getVerticalSlides(); // Checks if the presentation contains two or more // horizontal/vertical slides Reveal.hasHorizontalSlides(); Reveal.hasVerticalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element Reveal.getRevealElement(); // div class= reveal ... /div Custom Key Bindings Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional) Slide Changed Event A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Color Backgrounds All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section Image Backgrounds By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section Video Backgrounds Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Iframes are lazy-loaded when they become visible. If you'd like to preload iframes ahead of time, you can append a data-preload attribute to the slide section . You can also enable preloading globally for all iframes using the preloadIframes configuration option. Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom . Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code Syntax Highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Line Numbers Highlights To enable line numbers, add data-line-numbers to your code tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted: pre code class= hljs data-line-numbers= 4,8-11 import React, { useState } from 'react'; function Example() { const [count, setCount] = useState(0); return ( div p You clicked {count} times /p button onClick={() = setCount(count + 1)} Click me /button /div ); } /code /pre Step-by-step Highlights You can step through multiple code highlights on the same code block. Delimit each of your highlight steps with the | character. For example data-line-numbers=\"1|2-3|4,6-10\" will produce three steps. It will start by highlighting line 1, next step is lines 2-3, and finally line 4 and 6 through 10. Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function( slide ) { // Ignore numbering of vertical slides return [ Reveal.getIndices( slide ).h ]; }}); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' }); Overview mode Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Embedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched Resize Event When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } ); postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); postMessage Events When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName === 'slidechanged' ) { // Slide changed, see data.state for slide number } } ); postMessage Callbacks When you call any method via the postMessage API, reveal.js will dispatch a message with the return value. This is done so that you can call a getter method and see what the result is. Check out this example: revealWindow .postMessage( JSON.stringify({ method: 'getTotalSlides' }), '*' ); window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); // `data.method`` is the method that we invoked if( data.namespace === 'reveal' data.eventName === 'callback' data.method === 'getTotalSlides' ) { data.result // = the total number of slides } } ); Turning postMessage on/off This cross-window messaging can be toggled on or off using configuration flags. These are the default values. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Separate pages for fragments Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false. Page size Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page. Print stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script Instructions Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" . Speaker notes clock and timers The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Alternatively, you can enable the timer by setting totalTime , which sets the total length of your presentation (also in seconds). If both values are specified, totalTime wins and defaultTiming is ignored. Regardless of the baseline timing method, timings can also be given per slide section by setting the data-timing attribute (again, in seconds). Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (9.0.0 or later) Run npm install Run node plugin/notes-server Plugins Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ) . Registered plugin instances can optionally expose an \"init\" function that reveal.js will call to initialize them. When reveal.js is booted up via Reveal.initialize() , it will go through all registered plugins and invoke their \"init\" methods. If the \"init\" method returns a Promise, reveal.js will wait for that promise to be fulfilled before finishing the startup sequence and firing the ready event. Here's an example of a plugin that does some asynchronous work before reveal.js can proceed: let MyPlugin = { init: () = new Promise( resolve = setTimeout( resolve, 3000 ) ) }; Reveal.registerPlugin( 'myPlugin', MyPlugin ); Reveal.addEventListener( 'ready', () = console.log( 'Three seconds later...' ) ); Reveal.initialize(); Note that reveal.js will not wait for init Promise fulfillment if the plugin is loaded as an async dependency . If the plugin's init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence. Retrieving Plugins If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ) . If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ) . Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via https://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit https://example.com/token , where https://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex . socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full', // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: { RR: {\\\\bf R} } } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. MathJax in Markdown If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$` License MIT licensed Copyright (C) 2020 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js) <a href=\"https://slides.com?ref=github\"><img src=\"https://s3.amazonaws.com/static.slid.es/images/slides-github-banner-320x40.png?1\" alt=\"Slides\" width=\"160\" height=\"20\"></a>"},{"location":"meeting-embedded-2020/reveal.js/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown support , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com .","title":"reveal.js  "},{"location":"meeting-embedded-2020/reveal.js/README.html#supporting-revealjs","text":"This project was started and is maintained by @hakimel with the help of many contributions from the community . The best way to support the project is to become a paying member of Slides.com \u2014the reveal.js presentation platform that Hakim is building.","title":"Supporting reveal.js"},{"location":"meeting-embedded-2020/reveal.js/README.html#table-of-contents","text":"Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Custom Key Bindings Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Plugins Multiplexing Master presentation Client presentation Socket.io server MathJax License","title":"Table of contents"},{"location":"meeting-embedded-2020/reveal.js/README.html#more-reading","text":"Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading"},{"location":"meeting-embedded-2020/reveal.js/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com .","title":"Online Editor"},{"location":"meeting-embedded-2020/reveal.js/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"meeting-embedded-2020/reveal.js/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"meeting-embedded-2020/reveal.js/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (9.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 .","title":"Full setup"},{"location":"meeting-embedded-2020/reveal.js/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"meeting-embedded-2020/reveal.js/README.html#instructions","text":"","title":"Instructions"},{"location":"meeting-embedded-2020/reveal.js/README.html#markup","text":"Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"meeting-embedded-2020/reveal.js/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section","title":"Markdown"},{"location":"meeting-embedded-2020/reveal.js/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section","title":"External Markdown"},{"location":"meeting-embedded-2020/reveal.js/README.html#element-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"meeting-embedded-2020/reveal.js/README.html#slide-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"meeting-embedded-2020/reveal.js/README.html#configuring-marked","text":"We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } });","title":"Configuring marked"},{"location":"meeting-embedded-2020/reveal.js/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Specify the total time in seconds that is available to // present. If this is set to a nonzero value, the pacing // timer will work out the time available for each slide, // instead of using the defaultTiming value totalTime: 0, // Specify the minimum amount of time you want to allot to // each slide, if using the totalTime calculation method. If // the automated time allocation causes slide pacing to fall // below this threshold, then you will see an alert in the // speaker notes window minimumTimePerSlide: 0; // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Number of slides away from the current that are visible on mobile // devices. It is advisable to set this to a lower number than // viewDistance in order to save resources. mobileViewDistance: 2, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"meeting-embedded-2020/reveal.js/README.html#presentation-size","text":"All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 });","title":"Presentation Size"},{"location":"meeting-embedded-2020/reveal.js/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"meeting-embedded-2020/reveal.js/README.html#ready-event","text":"A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.","title":"Ready Event"},{"location":"meeting-embedded-2020/reveal.js/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"meeting-embedded-2020/reveal.js/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"meeting-embedded-2020/reveal.js/README.html#vertical-slide-navigation","text":"Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action:","title":"Vertical Slide Navigation"},{"location":"meeting-embedded-2020/reveal.js/README.html#navigation-mode","text":"You can fine tune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presentations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 - 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 - 2.3.","title":"Navigation Mode"},{"location":"meeting-embedded-2020/reveal.js/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"meeting-embedded-2020/reveal.js/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"meeting-embedded-2020/reveal.js/README.html#lazy-loading-iframes","text":"Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . section iframe data-src= http://hakim.se data-preload /iframe /section You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible.","title":"Lazy Loading Iframes"},{"location":"meeting-embedded-2020/reveal.js/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns an array with all horizontal/vertical slides in the deck Reveal.getHorizontalSlides(); Reveal.getVerticalSlides(); // Checks if the presentation contains two or more // horizontal/vertical slides Reveal.hasHorizontalSlides(); Reveal.hasVerticalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element Reveal.getRevealElement(); // div class= reveal ... /div","title":"API"},{"location":"meeting-embedded-2020/reveal.js/README.html#custom-key-bindings","text":"Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional)","title":"Custom Key Bindings"},{"location":"meeting-embedded-2020/reveal.js/README.html#slide-changed-event","text":"A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"meeting-embedded-2020/reveal.js/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"meeting-embedded-2020/reveal.js/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"meeting-embedded-2020/reveal.js/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe.","title":"Slide Backgrounds"},{"location":"meeting-embedded-2020/reveal.js/README.html#color-backgrounds","text":"All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section","title":"Color Backgrounds"},{"location":"meeting-embedded-2020/reveal.js/README.html#image-backgrounds","text":"By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section","title":"Image Backgrounds"},{"location":"meeting-embedded-2020/reveal.js/README.html#video-backgrounds","text":"Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section","title":"Video Backgrounds"},{"location":"meeting-embedded-2020/reveal.js/README.html#iframe-backgrounds","text":"Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Iframes are lazy-loaded when they become visible. If you'd like to preload iframes ahead of time, you can append a data-preload attribute to the slide section . You can also enable preloading globally for all iframes using the preloadIframes configuration option.","title":"Iframe Backgrounds"},{"location":"meeting-embedded-2020/reveal.js/README.html#background-transitions","text":"Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Background Transitions"},{"location":"meeting-embedded-2020/reveal.js/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"meeting-embedded-2020/reveal.js/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom .","title":"Slide Transitions"},{"location":"meeting-embedded-2020/reveal.js/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"meeting-embedded-2020/reveal.js/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"meeting-embedded-2020/reveal.js/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"meeting-embedded-2020/reveal.js/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code Syntax Highlighting"},{"location":"meeting-embedded-2020/reveal.js/README.html#line-numbers-highlights","text":"To enable line numbers, add data-line-numbers to your code tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted: pre code class= hljs data-line-numbers= 4,8-11 import React, { useState } from 'react'; function Example() { const [count, setCount] = useState(0); return ( div p You clicked {count} times /p button onClick={() = setCount(count + 1)} Click me /button /div ); } /code /pre","title":"Line Numbers &amp; Highlights"},{"location":"meeting-embedded-2020/reveal.js/README.html#step-by-step-highlights","text":"You can step through multiple code highlights on the same code block. Delimit each of your highlight steps with the | character. For example data-line-numbers=\"1|2-3|4,6-10\" will produce three steps. It will start by highlighting line 1, next step is lines 2-3, and finally line 4 and 6 through 10.","title":"Step-by-step Highlights"},{"location":"meeting-embedded-2020/reveal.js/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function( slide ) { // Ignore numbering of vertical slides return [ Reveal.getIndices( slide ).h ]; }}); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' });","title":"Slide number"},{"location":"meeting-embedded-2020/reveal.js/README.html#overview-mode","text":"Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"meeting-embedded-2020/reveal.js/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"meeting-embedded-2020/reveal.js/README.html#embedded-media","text":"Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.","title":"Embedded media"},{"location":"meeting-embedded-2020/reveal.js/README.html#embedded-iframes","text":"reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded iframes"},{"location":"meeting-embedded-2020/reveal.js/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"meeting-embedded-2020/reveal.js/README.html#resize-event","text":"When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } );","title":"Resize Event"},{"location":"meeting-embedded-2020/reveal.js/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' );","title":"postMessage API"},{"location":"meeting-embedded-2020/reveal.js/README.html#postmessage-events","text":"When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName === 'slidechanged' ) { // Slide changed, see data.state for slide number } } );","title":"postMessage Events"},{"location":"meeting-embedded-2020/reveal.js/README.html#postmessage-callbacks","text":"When you call any method via the postMessage API, reveal.js will dispatch a message with the return value. This is done so that you can call a getter method and see what the result is. Check out this example: revealWindow .postMessage( JSON.stringify({ method: 'getTotalSlides' }), '*' ); window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); // `data.method`` is the method that we invoked if( data.namespace === 'reveal' data.eventName === 'callback' data.method === 'getTotalSlides' ) { data.result // = the total number of slides } } );","title":"postMessage Callbacks"},{"location":"meeting-embedded-2020/reveal.js/README.html#turning-postmessage-onoff","text":"This cross-window messaging can be toggled on or off using configuration flags. These are the default values. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"Turning postMessage on/off"},{"location":"meeting-embedded-2020/reveal.js/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.","title":"PDF Export"},{"location":"meeting-embedded-2020/reveal.js/README.html#separate-pages-for-fragments","text":"Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false.","title":"Separate pages for fragments"},{"location":"meeting-embedded-2020/reveal.js/README.html#page-size","text":"Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.","title":"Page size"},{"location":"meeting-embedded-2020/reveal.js/README.html#print-stylesheet","text":"To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script","title":"Print stylesheet"},{"location":"meeting-embedded-2020/reveal.js/README.html#instructions_1","text":"Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project.","title":"Instructions"},{"location":"meeting-embedded-2020/reveal.js/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"meeting-embedded-2020/reveal.js/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"meeting-embedded-2020/reveal.js/README.html#share-and-print-speaker-notes","text":"Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" .","title":"Share and Print Speaker Notes"},{"location":"meeting-embedded-2020/reveal.js/README.html#speaker-notes-clock-and-timers","text":"The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Alternatively, you can enable the timer by setting totalTime , which sets the total length of your presentation (also in seconds). If both values are specified, totalTime wins and defaultTiming is ignored. Regardless of the baseline timing method, timings can also be given per slide section by setting the data-timing attribute (again, in seconds).","title":"Speaker notes clock and timers"},{"location":"meeting-embedded-2020/reveal.js/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (9.0.0 or later) Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"meeting-embedded-2020/reveal.js/README.html#plugins","text":"Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ) . Registered plugin instances can optionally expose an \"init\" function that reveal.js will call to initialize them. When reveal.js is booted up via Reveal.initialize() , it will go through all registered plugins and invoke their \"init\" methods. If the \"init\" method returns a Promise, reveal.js will wait for that promise to be fulfilled before finishing the startup sequence and firing the ready event. Here's an example of a plugin that does some asynchronous work before reveal.js can proceed: let MyPlugin = { init: () = new Promise( resolve = setTimeout( resolve, 3000 ) ) }; Reveal.registerPlugin( 'myPlugin', MyPlugin ); Reveal.addEventListener( 'ready', () = console.log( 'Three seconds later...' ) ); Reveal.initialize(); Note that reveal.js will not wait for init Promise fulfillment if the plugin is loaded as an async dependency . If the plugin's init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence.","title":"Plugins"},{"location":"meeting-embedded-2020/reveal.js/README.html#retrieving-plugins","text":"If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ) . If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ) .","title":"Retrieving Plugins"},{"location":"meeting-embedded-2020/reveal.js/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients","title":"Multiplexing"},{"location":"meeting-embedded-2020/reveal.js/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"meeting-embedded-2020/reveal.js/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via https://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"meeting-embedded-2020/reveal.js/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit https://example.com/token , where https://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex .","title":"Socket.io server"},{"location":"meeting-embedded-2020/reveal.js/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"meeting-embedded-2020/reveal.js/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full', // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: { RR: {\\\\bf R} } } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"meeting-embedded-2020/reveal.js/README.html#mathjax-in-markdown","text":"If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$`","title":"MathJax in Markdown"},{"location":"meeting-embedded-2020/reveal.js/README.html#license","text":"MIT licensed Copyright (C) 2020 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"meeting-embedded-2020/reveal.js/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"meeting-embedded-2020/reveal.js/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"meeting-embedded-2020/reveal.js/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"meeting-embedded-2020/reveal.js/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"meeting-embedded-2020/reveal.js/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"meeting-embedded-2020/reveal.js/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"meeting-embedded-2020/reveal.js/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"meeting-embedded-2020/reveal.js/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"meeting-embedded-2020/reveal.js/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"meeting-embedded-2020/reveal.js/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"meeting-embedded-2020/reveal.js/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"meeting-embedded-2020/reveal.js/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"meeting-embedded-2020/reveal.js/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"meeting-embedded-2020/reveal.js/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"meeting-embedded-2020/reveal.js/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"meeting-embedded-2020/reveal.js/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"meeting-embedded-2020/reveal.js/plugin/markdown/example.html#external-33","text":"","title":"External 3.3"},{"location":"meeting-embedded-2020/reveal.js/test/simple.html","text":"Slide 1.1 var a = 1; Slide 1.2 Slide 2","title":"Simple"},{"location":"meeting-embedded-2020/reveal.js/test/simple.html#slide-11","text":"var a = 1;","title":"Slide 1.1"},{"location":"meeting-embedded-2020/reveal.js/test/simple.html#slide-12","text":"","title":"Slide 1.2"},{"location":"meeting-embedded-2020/reveal.js/test/simple.html#slide-2","text":"","title":"Slide 2"}]}